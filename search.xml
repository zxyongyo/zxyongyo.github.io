<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>70道JavaScript常见面试题</title>
      <link href="/posts/2944b23d/"/>
      <url>/posts/2944b23d/</url>
      
        <content type="html"><![CDATA[<h2 id="1-undefined-和-null-有什么区别？"><a href="#1-undefined-和-null-有什么区别？" class="headerlink" title="1. undefined 和 null 有什么区别？"></a>1. <code>undefined</code> 和 <code>null</code> 有什么区别？</h2><p>在了解 <code>undefined</code> 和 <code>null</code>  的区别前，我们先来看一下他们的相似之处：</p><ul><li><p>它们同属于 JavaScript 的 <strong>7种</strong> <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">原始数据类型</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> primitiveTypes = [<span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;bigint&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;null&#x27;</span>, <span class="string">&#x27;undefined&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>];</span><br></pre></td></tr></table></figure></li><li><p>在对它们使用 <code>Boolean(value)</code> 或 <code>!!value</code> 转为布尔值时，都会被转为 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><p>然后来看它们的不同之处：</p><ul><li><p><code>undefined</code> 是未分配值的变量的默认值，或是一个没有显式返回值的函数的返回值，又或是一个对象中不存在的属性的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _thisIsUndefined;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doNothing</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a : <span class="string">&quot;ay&quot;</span>,</span><br><span class="line">    b : <span class="string">&quot;bee&quot;</span>,</span><br><span class="line">    c : <span class="string">&quot;si&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(_thisIsUndefined); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">doNothing</span>()); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;d&quot;</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p><code>null</code> 表示一个不存在的值或是一个空对象的引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// object</span></span><br></pre></td></tr></table></figure></li></ul><p>当我们使用 <code>==</code> 比较 <code>undefined</code> 和 <code>null</code> 时会得到 <code>true</code>，当使用 <code>===</code> 比较时会得到 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> ==  <span class="literal">null</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> === <span class="literal">null</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="2-amp-amp-运算符的作用？"><a href="#2-amp-amp-运算符的作用？" class="headerlink" title="2. &amp;&amp; 运算符的作用？"></a>2. <code>&amp;&amp;</code> 运算符的作用？</h2><p><code>&amp;&amp;</code> (逻辑与) 运算符当且仅当所有表达式都为 <code>true</code> 时返回 <code>true</code> 否则返回 <code>false</code>；</p><p>当操作对象不是布尔值时，它会找到第一个为 <strong>假</strong> 的操作对象并返回它，如果没有找到任何为假的操作对象，<strong>则返回最后一个</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &amp;&amp; <span class="number">1</span> &amp;&amp; []); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;abc&quot;</span> &amp;&amp; <span class="literal">true</span> &amp;&amp; <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="3-运算符的作用？"><a href="#3-运算符的作用？" class="headerlink" title="3. || 运算符的作用？"></a>3. <code>||</code> 运算符的作用？</h2><p><code>||</code>(逻辑或)运算符当且仅当所有表达式都为 <code>false</code> 时返回 <code>false</code> 否则返回 <code>true</code>；</p><p>当操作对象不是布尔值时，它会找到第一个为 <strong>真</strong> 的操作对象并返回它，如果没有找到任何为真的操作对象，<strong>则返回最后一个</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> || <span class="number">1</span> || <span class="string">&quot;abc&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> || <span class="string">&quot;&quot;</span> || <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="4-用一元加运算符（-）是将字符串转换为数字的最快方法吗？"><a href="#4-用一元加运算符（-）是将字符串转换为数字的最快方法吗？" class="headerlink" title="4. 用一元加运算符（+）是将字符串转换为数字的最快方法吗？"></a>4. 用一元加运算符（+）是将字符串转换为数字的最快方法吗？</h2><p>是的，根据 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Unary_plus">MDN描述 </a>，<strong>一元加（+）</strong> 运算符会在操作值之前尝试将它转为数字，如果目标已经是数字就什么也不做。</p><h2 id="5-什么是-DOM？"><a href="#5-什么是-DOM？" class="headerlink" title="5. 什么是 DOM？"></a>5. 什么是 DOM？</h2><p><strong>DOM</strong> 代表 <strong>文档对象模型</strong>（Document Object Model），是用来呈现以及与任何 HTML 和 XML 文档交互的 API。</p><p>当浏览器第一次读取（解析）HTML 时，会基于我们的 HTML文档 创建一个对象，就是 DOM，它是载入到浏览器中的文档模型，以节点树的形式来表现文档，每个节点代表文档的构成部分（如：页面元素、字符串、或注释等）。</p><p>假如有以下 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document Object Model<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等同的 DOM 应该是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202302171032104.png" alt="DOM tree"></p><p><code>JavaScript</code> 中的 <code>document</code> 对象为我们提供了很多方法，我们可以用来可以使用这些方法来完成选中DOM元素或更新元素的内容等操作。</p><h2 id="6-什么是事件传播？"><a href="#6-什么是事件传播？" class="headerlink" title="6. 什么是事件传播？"></a>6. 什么是事件传播？</h2><p>当事件在一个DOM元素上触发时，这个事件并不只在当前元素上触发。</p><p>当一个事件被触发后会经历<strong>三个阶段</strong>：</p><ul><li><strong>捕获阶段</strong>：事件对象从 <code>window</code> 开始依次向下传递，直到目标的父级元素，从外向内捕获事件对象；</li><li><strong>目标阶段</strong>：到达目标事件位置，触发事件；</li><li><strong>冒泡阶段</strong>：从目标的父级开始依次向上传递，直到 <code>window</code> 停止，从内向外冒泡事件对象。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20210428110115.jpg" alt="Event flow"></p><blockquote><p><strong>详细请查看 <a href="/posts/81781fa3/">彻底弄懂 js 中事件冒泡和捕获🎈</a></strong></p></blockquote><h2 id="7-什么是事件冒泡？"><a href="#7-什么是事件冒泡？" class="headerlink" title="7. 什么是事件冒泡？"></a>7. 什么是事件冒泡？</h2><p>当事件在一个DOM元素上触发时，这个事件并不只在当前元素上触发。</p><p>在冒泡阶段事件会从目标的父级依次向上传递直到 <code>window</code> ，这个过程叫做事件冒泡。</p><p>如果有这样的 HTML 片段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grandparent&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addEvent</span>(<span class="params">el, event, callback, isCapture = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!el || !event || !callback || <span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> el === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el);</span><br><span class="line">  &#125;;</span><br><span class="line">  el.<span class="title function_">addEventListener</span>(event, callback, isCapture);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> parent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.parent&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> grandparent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.grandparent&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(child, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(parent, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;parent&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(grandparent, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;grandparent&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;document&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(<span class="variable language_">window</span>, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>addEventListener</code> 的第三个参数 <code>useCapture</code> 默认为 <code>false</code>，表示事件将在冒泡阶段执行。</p><p>如果我们点击 <code>class</code> 为 <code>child</code> 的元素，控制台将依次打印 <code>child</code>、<code>parent</code>、<code>grandparent</code>、 <code>html</code>、<code>document</code> 和 <code>window</code>，这就是事件冒泡。</p><h2 id="8-什么是事件捕获？"><a href="#8-什么是事件捕获？" class="headerlink" title="8. 什么是事件捕获？"></a>8. 什么是事件捕获？</h2><p>当事件在一个DOM元素上触发时，这个事件并不只在当前元素上触发。</p><p>在捕获阶段事件会从 <code>window</code>  依次向下传递，直到目标的父元素，这个过程叫做事件捕获。</p><p>如果有这样的 HTML 片段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grandparent&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addEvent</span>(<span class="params">el, event, callback, isCapture = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!el || !event || !callback || <span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> el === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el);</span><br><span class="line">  &#125;;</span><br><span class="line">  el.<span class="title function_">addEventListener</span>(event, callback, isCapture);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> child = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.child&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> parent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.parent&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> grandparent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.grandparent&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(child, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child&#x27;</span>);</span><br><span class="line">  &#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(parent, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;parent&#x27;</span>);</span><br><span class="line">  &#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(grandparent, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;grandparent&#x27;</span>);</span><br><span class="line">  &#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;document&#x27;</span>);</span><br><span class="line">  &#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  &#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addEvent</span>(<span class="variable language_">window</span>, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;window&#x27;</span>);</span><br><span class="line">  &#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>addEventListener</code> 的第三个参数 <code>useCapture</code> 为 <code>true</code> 时，表示事件将在捕获阶段执行。</p><p>如果我们点击 <code>class</code> 为 <code>child</code> 的元素，控制台将依次打印 <code>window</code>、<code>document</code>、<code>html</code>、 <code>grandparent</code> 、<code>parent</code>  和 <code>child</code>，这就是事件捕获。</p><h2 id="9-event-preventDefault-和-event-stopPropagation-方法有什么区别？"><a href="#9-event-preventDefault-和-event-stopPropagation-方法有什么区别？" class="headerlink" title="9. event.preventDefault() 和 event.stopPropagation() 方法有什么区别？"></a>9. <code>event.preventDefault()</code> 和 <code>event.stopPropagation()</code> 方法有什么区别？</h2><ul><li><p><code>event.preventDefault()</code> 方法用来阻止事件的默认行为。</p><p>例如：在一个 <code>checkbox</code> 元素的 <code>click</code> 事件处理函数中调用 <code>event.preventDefault()</code>，该  <code>checkbox</code> 将无法被选中；或在一个 <code>form</code> 元素的 <code>submit</code> 事件处理函数中调用 <code>event.preventDefault()</code>，该 <code>form</code> 的默认提交行为将被阻止。</p></li><li><p><code>event.stopPropagation)()</code> 方法用来阻止事件传播，或者说是阻止事件在冒泡或捕获阶段执行。</p></li></ul><h2 id="10-如何判断一个元素的事件中是否使用了-event-prevenDefault-方法？"><a href="#10-如何判断一个元素的事件中是否使用了-event-prevenDefault-方法？" class="headerlink" title="10. 如何判断一个元素的事件中是否使用了 event.prevenDefault() 方法？"></a>10. 如何判断一个元素的事件中是否使用了 <code>event.prevenDefault()</code> 方法？</h2><p>我们可以使用 <code>event</code> 对象上的 <code>defaultPrevented</code> 属性来判断，它是一个布尔值，表示该事件是否调用了 <code>prevenDefault()</code> 方法。</p><h2 id="11-为什么这段代码中-obj-someProp-x-会报错？"><a href="#11-为什么这段代码中-obj-someProp-x-会报错？" class="headerlink" title="11. 为什么这段代码中 obj.someProp.x 会报错？"></a>11. 为什么这段代码中 <code>obj.someProp.x</code> 会报错？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">someProp</span>.<span class="property">x</span>) <span class="comment">// Uncaught TypeError: Cannot read properties of undefined (reading &#x27;x&#x27;)</span></span><br></pre></td></tr></table></figure><p><code>someProp</code> 在 <code>obj</code> 中并不存在，所以它的值为 <code>undefined</code>，<code>undefined</code> 上没有任何属性可以读取，所以会报错。</p><h2 id="12-event-target-是什么？"><a href="#12-event-target-是什么？" class="headerlink" title="12. event.target 是什么？"></a>12. <code>event.target</code> 是什么？</h2><p><code>event.target</code> 是触发事件的对象（某个dom元素）的引用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;handleClick(event)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;margin:15px; border:1px solid red;border-radius:3px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 25px; border:1px solid royalblue;border-radius:3px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin:25px;border:1px solid skyblue;border-radius:3px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;margin:10px&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>); <span class="comment">// &lt;button style=&quot;margin:10px&quot;&gt;Button&lt;/button&gt;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上实例，当我们点击 <code>button</code> 时，尽管事件处理函数被添加在最外层的 <code>div</code>，<code>event.target</code> 也还是 <code>button</code> 元素。</p><h2 id="13-event-currentTarget-是什么？"><a href="#13-event-currentTarget-是什么？" class="headerlink" title="13. event.currentTarget 是什么？"></a>13. <code>event.currentTarget</code> 是什么？</h2><p><code>event.currentTarget</code> 指的是事件的当前目标，它<strong>总是指向事件绑定的元素</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;handleClick(event)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;margin:15px; border:1px solid red;border-radius:3px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 25px; border:1px solid royalblue;border-radius:3px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin:25px;border:1px solid skyblue;border-radius:3px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;margin:10px&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>); <span class="comment">// &lt;div onclick=&quot;handleClick(event)&quot; style=&quot;text-align: center;margin:15px; border:1px solid red;border-radius:3px;&quot;&gt;...&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还是这个例子，点击 <code>button</code> 时，<code>event.currentTarget</code> 指向最外层绑定点击事件的 <code>div</code> 的引用。</p><h2 id="14-和-有什么区别？"><a href="#14-和-有什么区别？" class="headerlink" title="14. == 和 === 有什么区别？"></a>14. <code>==</code> 和 <code>===</code> 有什么区别？</h2><p><code>==</code> 会把要比较的值强制转换为同类型，再比较值；<code>===</code> 不会对操作对象进行强制转换，而是比较操作对象的值和类型。</p><p>强制类型转换是指将值从一种数据类型自动或隐式地转换为另一种数据类型，在使用 <code>==</code> 比较两个值时会对它们进行强制类型转换；假如我们要比较 <code>x == y</code>：</p><ol><li>如果 <code>x</code> 和 <code>y</code> 类型相同，则比较它们的值；</li><li>如果 <code>x</code> 为 <code>null</code> <code>y</code> 为 <code>undefined</code>，则返回 <code>true</code>；</li><li>如果 <code>x</code> 为 <code>undefined</code> <code>y</code> 为 <code>null</code>，则返回 <code>true</code>；</li><li>如果 <code>x</code> 是 <code>number</code> 类型，<code>y</code> 是 <code>string</code> 类型，则返回 <code>x == Number(y)</code>；</li><li>如果 <code>x</code> 是 <code>string</code> 类型，<code>y</code> 是 <code>number</code> 类型，则返回 <code>Number(x) == y</code>；</li><li>如果 <code>x</code> 是 <code>boolean</code> 类型，<code>y</code> 不是 <code>boolean</code> 类型，则返回 <code>number(x) == y</code>；</li><li>如果 <code>x</code> 不是 <code>boolean</code> 类型，<code>y</code> 是 <code>boolean</code> 类型，则返回 <code>x == number(y)</code>；</li><li>如果 <code>x</code> 是基本类型，<code>y</code> 是 <code>object</code> ，则返回 <code>x == toPrimitive(y)</code>；</li><li>如果 <code>x</code> 是 <code>object</code> ，<code>y</code> 是基本类型，则返回 <code>toPrimitive(x) == y</code>；</li><li>否则，返回 <code>false</code>。</li></ol><blockquote><p><code>toPrimitive</code> 是指定了一种接受首选类型并返回对象原始值的表示的方法，详细请查看 [MDN - Symbol.toPrimitive</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> == <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="string">&#x27;1&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="literal">false</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1,2&#x27;</span> == [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[object Object]&#x27;</span> == &#123;&#125;) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>把 <code>==</code> 改为 <code>===</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> === <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> === <span class="string">&#x27;1&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> === <span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1,2&#x27;</span> === [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[object Object]&#x27;</span> === &#123;&#125;) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="15-为什么比较两个相似的对象时会返回-false？"><a href="#15-为什么比较两个相似的对象时会返回-false？" class="headerlink" title="15. 为什么比较两个相似的对象时会返回 false？"></a>15. 为什么比较两个相似的对象时会返回 <code>false</code>？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> c = a</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == c) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === c) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>JS 以不同的方式比较对象和基本类型；js 通过值比较基本类型，而比较两个对象时，js通过比较对象的引用或内存地址对它们进行比较。<code>a</code> 和 <code>b</code> 是分别对一个对象的引用，它们值的内存地址并不同；而 <code>a</code> 和 <code>c</code> 指向同一个引用或内存地址。</p><h2 id="16-有什么用？"><a href="#16-有什么用？" class="headerlink" title="16. !! 有什么用？"></a>16. <code>!!</code> 有什么用？</h2><p><code>!!</code> 操作符可以将右侧值强制转换为 <code>boolean</code> 类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="string">&#x27;&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="title class_">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="string">&#x27; &#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!&#123;&#125;) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!![]) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!!<span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!![].<span class="property">length</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="17-如何计算一行中的多个表达式？"><a href="#17-如何计算一行中的多个表达式？" class="headerlink" title="17. 如何计算一行中的多个表达式？"></a>17. 如何计算一行中的多个表达式？</h2><p>可以使用 <code>,</code> 运算符，它从左到右计算并返回最右侧的值或计算结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">x = (x++, x = <span class="title function_">addFive</span>(x), x *= <span class="number">2</span>, x -= <span class="number">5</span>, x += <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 27</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addFive</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边的示例括号中的表达式会从左到右依次计算 <code>x</code> 的值，并最后会返回最右侧表达式的计算结果。</p><h2 id="18-什么是变量提升？"><a href="#18-什么是变量提升？" class="headerlink" title="18. 什么是变量提升？"></a>18. 什么是变量提升？</h2><p>变量提升是指 js 中变量和函数的声明，会被提升至作用域的顶部。（注意：<strong>用 <code>let</code> 和 <code>const</code> 声明的变量或箭头函数和函数表达式声明的函数不会提升</strong>）</p><p>为了理解变量提升，这里必须解释一下 <strong>JavaScript执行上下文</strong>，执行上下文是评估和执行 JavaScript 代码的环境的抽象概念。每当 Javascript 代码在运行的时候，它都是在执行上下文中运行。执行上下文有编译和执行两个阶段：</p><p>在编译阶段，它会获取所有函数声明并将它们提升到作用与顶部，然后获取所有变量声明（使用 var）把它们提升至作用域顶部并初始化为 <code>undefined</code>。</p><p>在执行阶段，它会为之前提升的变量赋值，执行或调用函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// undefined</span></span><br><span class="line">y = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Mark&quot;</span>)) <span class="comment">// Hello Mark!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + name + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y</span><br></pre></td></tr></table></figure><p>上边的代码在编译阶段大概像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + name + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y <span class="comment">// 隐式的赋值 undefined</span></span><br></pre></td></tr></table></figure><p>执行阶段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + name + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y)</span><br><span class="line">y = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Mark&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="19-什么是作用域？"><a href="#19-什么是作用域？" class="headerlink" title="19. 什么是作用域？"></a>19. 什么是作用域？</h2><p>作用域是指我们在 JavaScript 中可以有效访问变量和函数的区域（也就是当前的执行上下文），JavaScript 中有三种作用域：</p><ul><li><p><strong>全局作用域</strong> - 在脚本模式下运行所有代码的默认作用域；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="string">&#x27;global scope&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">globalFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(g)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">globalFn</span>() <span class="comment">// global scope</span></span><br></pre></td></tr></table></figure></li><li><p><strong>模块作用域</strong> - 在模块中运行的代码的作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;module scope&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> b = <span class="string">&#x27;exported variable&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; b &#125; <span class="keyword">from</span> <span class="string">&#x27;./lib.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// exported variable</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure></li><li><p><strong>函数作用域</strong> - 由函数创建的作用域；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;function scope&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// function scope</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure></li></ul><p>此外，用 <code>let</code> 和 <code>const</code> 声明的变量可以属于一个额外的作用域：</p><ul><li><p><strong>块级作用域</strong> - 用一对大括号创建的作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;var variable&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="string">&#x27;let variable&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// let variable</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure></li></ul><p>作用域也是一组查找变量的规则。如果变量在当前作用域中不存在，它会查找它的上级作用域中查找，如果还不存在它会依次向上搜索，直到全局作用域，如果变量被找到则可以使用，否则将会报错。它会优先搜索使用最近的作用域中的变量，一旦找到则停止搜索。这也叫做 <strong>作用域链</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Global Scope</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Comrades&quot;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;Sayonara&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// outer&#x27;s scope</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;World&quot;</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// inner&#x27;s scope</span></span><br><span class="line">        <span class="keyword">var</span> b = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b + <span class="string">&quot; &quot;</span> + a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inner</span>()</span><br><span class="line">&#125;  </span><br><span class="line"><span class="title function_">outer</span>() <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202302201634511.png" alt="scope chain"></p><h2 id="20-什么是闭包？"><a href="#20-什么是闭包？" class="headerlink" title="20. 什么是闭包？"></a>20. 什么是闭包？</h2><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = <span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">baz</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>函数 <code>bar()</code> 的词法作用域能够访问 <code>foo()</code> 的内部作用域。然后我们将 <code>bar() </code> 函数本身当作一个值类型进行传递。在这个例子中，我们将 <code>bar</code> 所引用的函数对象本身当作返回值。</p><p>在 <code>foo()</code> 执行后，其返回值（也就是内部的 <code>bar()</code> 函数）赋值给变量 <code>baz</code> 并调用 <code>baz()</code>，实际上只是通过不同的标识符引用调用了内部的函数 <code>bar()</code>。</p><p><code>bar()</code> 显然可以被正常执行。但是在这个例子中，它在自己定义的词法作用域以外的地方执行。</p><p>在 <code>foo()</code> 执行后，通常会期待 <code>foo()</code> 的整个内部作用域都被销毁，因为我们知道引擎有垃圾回收器用来释放不再使用的内存空间。由于看上去 <code>foo()</code> 的内容不会再被使用，所以很自然地会考虑对其进行回收。</p><p>而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此没有被回收。谁在使用这个内部作用域？原来是 <code>bar()</code> 本身在使用。</p><p>拜 <code>bar()</code> 所声明的位置所赐，它拥有涵盖 <code>foo()</code> 内部作用域的闭包，使得该作用域能够一直存活，以供 <code>bar()</code> 在之后任何时间进行引用。</p><p><code>bar()</code> 依然持有对该作用域的引用，而这个引用就叫作闭包。</p><blockquote><p>引用自 <a href="https://book.douban.com/subject/26351021/">《你不知道的JavaScript（上卷）》</a></p></blockquote><h2 id="21-JS-中都有哪些”假值”？"><a href="#21-JS-中都有哪些”假值”？" class="headerlink" title="21. JS 中都有哪些”假值”？"></a>21. JS 中都有哪些”假值”？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> falsyValues = [<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="title class_">NaN</span>, <span class="literal">false</span>]</span><br></pre></td></tr></table></figure><p>假值 是指转为 <code>boolean</code> 后为 <code>false</code> 的值。 </p><h2 id="22-如何判断一个值是”假值”？"><a href="#22-如何判断一个值是”假值”？" class="headerlink" title="22. 如何判断一个值是”假值”？"></a>22. 如何判断一个值是”假值”？</h2><p>使用 <code>Boolean()</code> 函数或 <code>!!</code> 操作符。</p><h2 id="23-use-strict-有什么用？"><a href="#23-use-strict-有什么用？" class="headerlink" title="23. use strict 有什么用？"></a>23. <code>use strict</code> 有什么用？</h2><p><code>use strict</code> 是 <code>ES5</code> 的一个特性，用来开启严格模式，在严格模式下可以帮我们提前规避一些代码可能的错误。</p><ul><li><p>限制分配未声明的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">returnY</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">    y = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">returnY</span>() <span class="comment">// Uncaught ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>限制为只读或不可写的全局变量赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">NaN</span> = <span class="title class_">NaN</span></span><br><span class="line"><span class="keyword">var</span> <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Infinity</span> = <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>删除不可删除的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">x</span></span><br></pre></td></tr></table></figure></li><li><p>重复的函数参数名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, b, c</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>eval()</code> 函数创建变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line">      </span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;var a = 1&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure></li><li><p><code>this</code> 的默认值将是 <code>undefined</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">returnThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">returnThis</span>()) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>还有<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">更多的特性</a>就不一一列举了。</p></li></ul><h2 id="24-JS-中的-this-是什么？"><a href="#24-JS-中的-this-是什么？" class="headerlink" title="24. JS 中的 this 是什么？"></a>24. JS 中的 <code>this</code> 是什么？</h2><p>在全局作用域下，<code>this</code> 始终指向全局对象 <code>window</code>（在浏览器中）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">b</span> = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">b</span>) <span class="comment">// &#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>函数中的 <code>this</code> 关键字在绝大多数情况下取决于函数的调用方式。<code>this</code> 不能在执行期间被赋值，并且在每次函数被调用时 <code>this</code> 的值也可能会不同。此外在严格模式和非严格模式中也会有一些差别。另外，在调用函数时还可以通过 <code>bind(), call(), apply()</code> 方法改变函数中 <code>this</code> 的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f1</span>() === <span class="variable language_">window</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在严格模式下，如果进入执行环境时没有设置 <code>this</code> 的值，<code>this</code> 将保持为 <code>undefined</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f2</span>()) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="title function_">f2</span>()) <span class="comment">// Window</span></span><br></pre></td></tr></table></figure><p>使用 <code>call()</code> 和 <code>apply()</code> 改变函数内 <code>this</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;obj a&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;global a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">whatsThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">whatsThis</span>() <span class="comment">// global a</span></span><br><span class="line">whatsThis.<span class="title function_">call</span>(obj) <span class="comment">// obj a</span></span><br><span class="line">whatsThis.<span class="title function_">apply</span>(obj) <span class="comment">// obj a</span></span><br></pre></td></tr></table></figure><p>调用 <code>f.bind(someObject)</code> 会创建一个与 <code>f</code> 具有相同函数体和作用域的函数，但是在这个新函数中，<code>this</code> 将永久地被绑定到了 <code>bind</code> 的第一个参数，无论这个函数是如何被调用的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = f.<span class="title function_">bind</span>(&#123;<span class="attr">a</span>: <span class="string">&#x27;azerty&#x27;</span>&#125;)</span><br><span class="line"><span class="title function_">g</span>() <span class="comment">// azerty</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h = g.<span class="title function_">bind</span>(&#123;<span class="attr">a</span>: <span class="string">&#x27;yoo&#x27;</span>&#125;) <span class="comment">// bind 只生效一次</span></span><br><span class="line"><span class="title function_">h</span>() <span class="comment">// azerty</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">a</span>: <span class="number">38</span>, <span class="attr">f</span>: f, <span class="attr">g</span>: g, <span class="attr">h</span>: h &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">a</span>)</span><br><span class="line">o.<span class="title function_">f</span>() <span class="comment">// 38</span></span><br><span class="line">o.<span class="title function_">g</span>() <span class="comment">// azerty</span></span><br><span class="line">o.<span class="title function_">h</span>() <span class="comment">// azerty</span></span><br></pre></td></tr></table></figure><p>箭头函数不提供自身的  <code>this</code> 绑定（箭头函数中 <code>this</code> 的值将保持为闭合词法上下文的值）。如果将 <code>this</code> 传递给 <code>bind(), call(), apply()</code> 方法来调用箭头函数，它将被忽略：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalObj = <span class="variable language_">this</span></span><br><span class="line"><span class="keyword">var</span> foo = (<span class="function">() =&gt;</span> <span class="variable language_">this</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>() === globalObj) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">foo</span>: foo&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">foo</span> === globalObj) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试使用 call 来绑定 this</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="title function_">call</span>(obj) === globalObject); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试使用 bind 来绑定 this</span></span><br><span class="line">foo = foo.<span class="title function_">bind</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>() === globalObject); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>当函数作为对象里的方法被调用时，<code>this</code> 被设置为调用该函数的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">prop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="title function_">f</span>()) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>当函数被用作事件处理函数时，它的 <code>this</code> 指向触发事件的元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === e.<span class="property">currentTarget</span>) <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleClick)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="25-JS-中对象的-prototype-是什么？"><a href="#25-JS-中对象的-prototype-是什么？" class="headerlink" title="25. JS 中对象的 prototype 是什么？"></a>25. JS 中对象的 <code>prototype</code> 是什么？</h2><p>每个实例对象（Object）都有一个私有属性（__proto__）指向它的构造函数的原型对象（<strong>prototype</strong>），这个原型对象也有自己的原型对象，层层向上直到 <code>null</code>，<code>null</code> 没有原型。</p><p>当我们使用一个对象的属性时，它会先在对象自身查找，如果找不到，则再到原型上查找，层层向上直到找到或查找到 <code>null</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="title function_">toString</span>()) <span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>() === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">toString</span>()) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="26-什么是立即执行函数（IIFE），它有什么用？"><a href="#26-什么是立即执行函数（IIFE），它有什么用？" class="headerlink" title="26. 什么是立即执行函数（IIFE），它有什么用？"></a>26. 什么是立即执行函数（IIFE），它有什么用？</h2><p>立即执行函数（IIFE）是一个在创建或声明后将被立即调用或执行的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">named</span>(<span class="params">params</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">global</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="variable language_">window</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> utility = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">//utilities</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>以上都是创建 <em>立即执行函数</em> 正确的方式，我们可以给 <em>立即执行函数</em> 传递参数（如倒数第二个例子），也可以把 <em>立即执行函数</em> 的返回值保存到一个变量，以便稍后引用它。</p><p><em>立即执行函数</em> 的最佳用途是用来做一些初始化操作，以避免与全局作用域下的其它变量发生命名冲突或污染全局命名空间。</p><p>假如我们现在需要引入一个工具包 <code>lib.js</code>，这个工具包提供了两个全局方法 <code>createGraph</code> 和 <code>drawGraph</code>，但是我们只需要用 <code>createGraph</code> ， <code>drawGraph</code> 方法需要自己实现，就可以用 <em>立即执行函数</em> 来初始化：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnurl.com/lib.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> graphUtility = (<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">myDrawGraph</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// ...</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            createGraph,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">drawGraph</span>: myDrawGraph</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)()</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用</span></span></span><br><span class="line"><span class="language-javascript">    graphUtility.<span class="title function_">createGraph</span>()</span></span><br><span class="line"><span class="language-javascript">    graphUtility.<span class="title function_">drawGraph</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="27-Function-prototype-call-有什么用？"><a href="#27-Function-prototype-call-有什么用？" class="headerlink" title="27. Function.prototype.call 有什么用？"></a>27. <code>Function.prototype.call</code> 有什么用？</h2><p><code>call</code> 方法可以使用一个指定的 <code>this</code> 值来调用函数，即会设置调用函数时函数体内 <code>this</code> 的值；它接收一个用来指定 <code>this</code> 值的参数，和一个传递给函数的参数列表。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn.<span class="title function_">call</span>(thisArg, arg1, arg2...)</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zxyong&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params">greetingMessage</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;greetingMessage&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greeting.<span class="title function_">call</span>(person, <span class="string">&#x27;hello&#x27;</span>) <span class="comment">// hello zxyong</span></span><br></pre></td></tr></table></figure><h2 id="28-Function-prototype-apply-有什么用？"><a href="#28-Function-prototype-apply-有什么用？" class="headerlink" title="28. Function.prototype.apply 有什么用？"></a>28. <code>Function.prototype.apply</code> 有什么用？</h2><p><code>apply</code> 方法可以使用一个指定的 <code>this</code> 值来调用函数，即会设置调用函数时函数体内 <code>this</code> 的值；它接收一个用来指定 <code>this</code> 值的参数，和一个数组（或类数组对象）用来给函数提供参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn.<span class="title function_">apply</span>(thisArg, argsArray)</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zxyong&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params">greetingMessage</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;greetingMessage&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greeting.<span class="title function_">apply</span>(person, [<span class="string">&#x27;hello&#x27;</span>]) <span class="comment">// hello zxyong</span></span><br></pre></td></tr></table></figure><h2 id="29-Function-prototype-call-和-Function-prototype-apply-方法有什么区别？"><a href="#29-Function-prototype-call-和-Function-prototype-apply-方法有什么区别？" class="headerlink" title="29. Function.prototype.call 和 Function.prototype.apply 方法有什么区别？"></a>29. <code>Function.prototype.call</code> 和 <code>Function.prototype.apply</code> 方法有什么区别？</h2><p><code>call</code> 和 <code>apply</code> 方法的作用完全一样，唯一的不同就是指定函数参数的方式，<code>call</code> 方法使用参数列表来指定参数，<code>apply</code> 方法使用数组（或类数组对象）来指定参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">result</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">result</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reduceAdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = <span class="variable language_">arguments</span>.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        result += <span class="variable language_">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reduceAdd.<span class="title function_">call</span>(obj1, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">reduceAdd.<span class="title function_">apply</span>(obj2, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">result</span>) <span class="comment">// 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">result</span>) <span class="comment">//15</span></span><br></pre></td></tr></table></figure><h2 id="30-Function-prototype-bind-有什么用？"><a href="#30-Function-prototype-bind-有什么用？" class="headerlink" title="30. Function.prototype.bind 有什么用？"></a>30. <code>Function.prototype.bind</code> 有什么用？</h2><p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数（不受方法调用的影响），而其余参数将作为新函数的默认参数，供调用时使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">9</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">81</span>,</span><br><span class="line">    <span class="attr">getX</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="title function_">getX</span>()) <span class="comment">// 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="variable language_">module</span>.<span class="property">getX</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">retrieveX</span>()) <span class="comment">// 9  - 因为函数是在全局作用域调用的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.<span class="title function_">bind</span>(<span class="variable language_">module</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">boundGetX</span>()) <span class="comment">// 81</span></span><br></pre></td></tr></table></figure><h2 id="31-什么是函数式编程？JS-的哪些特性让其成为函数式编程的首选？"><a href="#31-什么是函数式编程？JS-的哪些特性让其成为函数式编程的首选？" class="headerlink" title="31. 什么是函数式编程？JS 的哪些特性让其成为函数式编程的首选？"></a>31. 什么是函数式编程？JS 的哪些特性让其成为函数式编程的首选？</h2><p>函数式编程是一种编程范式，主要是利用函数把运算过程封装起来，通过组合各种函数来计算结果。</p><p>就像 JS 的 <code>Array</code> 拥有 <code>map, filter, reduce</code> 等非常实用的原型方法。因为它们都不会改变原数组，使它们成为了 <em>纯函数</em>，而且 JS 支持高阶函数和闭包等都是函数式编程语言的特征。</p><blockquote><p>纯函数指的是<strong>相同的输入，永远会得到相同的输出</strong>。</p></blockquote><h2 id="32-什么是高阶函数？"><a href="#32-什么是高阶函数？" class="headerlink" title="32. 什么是高阶函数？"></a>32. 什么是高阶函数？</h2><p>高阶函数是指可以返回函数或接收参数或具有函数值的参数的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">higherOrderFunction</span>(<span class="params">param, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">callback</span>(param)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="33-为什么函数称为一等对象？"><a href="#33-为什么函数称为一等对象？" class="headerlink" title="33. 为什么函数称为一等对象？"></a>33. 为什么函数称为一等对象？</h2><p>JS 中的函数被称为一等对象，因为它们被视为语言中的任何其他值。它可以分配给变量，它可以是对象的属性，它可以是数组中的一项，它可以作为参数传递给函数，它可以作为函数的返回值，函数与 JS 中任何其他值的唯一区别在于它可以被调用。</p><h2 id="34-手动实现-Array-prototype-map-方法。"><a href="#34-手动实现-Array-prototype-map-方法。" class="headerlink" title="34. 手动实现 Array.prototype.map 方法。"></a>34. 手动实现 <code>Array.prototype.map</code> 方法。</h2><p><code>map()</code> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">arr, mapCallback</span>) &#123;</span><br><span class="line">    <span class="comment">// 查验参数</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || !arr.<span class="property">length</span> || <span class="keyword">typeof</span> mapCallback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(<span class="title function_">mapCallback</span>(arr[i], i, arr))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="35-手动实现-Array-prototype-filter-方法。"><a href="#35-手动实现-Array-prototype-filter-方法。" class="headerlink" title="35. 手动实现 Array.prototype.filter 方法。"></a>35. 手动实现 <code>Array.prototype.filter</code> 方法。</h2><p><code>filter()</code> 方法创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">filter</span>(<span class="params">arr, filterCallback</span>) &#123;</span><br><span class="line">    <span class="comment">// 查验参数</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || !arr.<span class="property">length</span> || <span class="keyword">typeof</span> filterCallback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">filterCallback</span>(arr[i], i, arr)) &#123;</span><br><span class="line">                result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="36-手动实现-Array-prototype-reduce-方法。"><a href="#36-手动实现-Array-prototype-reduce-方法。" class="headerlink" title="36. 手动实现 Array.prototype.reduce 方法。"></a>36. 手动实现 <code>Array.prototype.reduce</code> 方法。</h2><p><code>reduce()</code> 方法对数组中的每个元素按序执行一个由您提供的 <strong>reducer</strong> 函数，每一次运行 <strong>reducer</strong> 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</p><p>第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被作为初始值，迭代器将从第二个元素开始执行（索引为 1 而不是 0）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reduce</span>(<span class="params">arr, reduceCallback, initialValue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || !arr.<span class="property">length</span> || <span class="keyword">typeof</span> reduceCallback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> hasInitialValue = initialValue !== <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">let</span> value = hasInitialValue ? initialValue : arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = hasInitialValue ? <span class="number">0</span> : <span class="number">1</span>, len = arr.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">            value = <span class="title function_">reduceCallback</span>(value, arr[i], i, arr); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="37-arguments-对象是什么？"><a href="#37-arguments-对象是什么？" class="headerlink" title="37. arguments 对象是什么？"></a>37. <code>arguments</code> 对象是什么？</h2><p><code>arguments</code> 对象是传入函数的参数值的集合。它是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E4%BD%BF%E7%94%A8%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1">类数组对象</a>。我们可以使用 <code>Array.prototype.slice</code> 将参数对象转换为数组。</p><blockquote><p><code>arguments</code> 对象不能在箭头函数中使用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrowFn</span> = (<span class="params">...args</span>) =&gt; args</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>)) <span class="comment">// [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrowFn</span>(<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>)) <span class="comment">// [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="38-如何创建一个没有原型的对象？"><a href="#38-如何创建一个没有原型的对象？" class="headerlink" title="38. 如何创建一个没有原型的对象？"></a>38. 如何创建一个没有原型的对象？</h2><p>我们可以使用 <code>Object.create()</code> 来创建一个没有原型的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o1 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="title function_">toString</span>()) <span class="comment">// &#x27;[object Object]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o2.<span class="title function_">toString</span>()) <span class="comment">// Uncaught TypeError: o2.toString is not a function</span></span><br></pre></td></tr></table></figure><h2 id="39-在这段代码中，当你调用-fn-时为什么-b-变成了一个全局变量？"><a href="#39-在这段代码中，当你调用-fn-时为什么-b-变成了一个全局变量？" class="headerlink" title="39. 在这段代码中，当你调用 fn 时为什么 b 变成了一个全局变量？"></a>39. 在这段代码中，当你调用 <code>fn</code> 时为什么 <code>b</code> 变成了一个全局变量？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = b = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>这是因为赋值运算符（=）是从右到左组合或求值的。上边的示例就相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = (b = <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>首先表达式 <code>b = 0</code> 会先被执行，因为变量 <code>b</code> 还未声明，JS 会把未声明就赋值的变量添加为全局变量；然后把 <code>b = 0</code> 的返回值 0，赋值给变量 <code>a</code>，因为 <code>a</code> 已经用 <code>let</code> 关键字声明了，则会成为函数的局部变量。</p><p>我们也可以用一下代码解决这个问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a, b</span><br><span class="line">    a = b = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>()</span><br></pre></td></tr></table></figure><h2 id="40-ECMAScript-是什么？"><a href="#40-ECMAScript-是什么？" class="headerlink" title="40. ECMAScript 是什么？"></a>40. <code>ECMAScript</code> 是什么？</h2><p>ECMAScript 是 JavaScript所基于的脚本语言，JavaScript 遵循 ECMAScript 标准的规范变化。</p><h2 id="41-ES6-有哪些新特性？"><a href="#41-ES6-有哪些新特性？" class="headerlink" title="41. ES6 有哪些新特性？"></a>41. ES6 有哪些新特性？</h2><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%EF%BC%9F">箭头函数</a></li><li><a href="#ES6-%E7%9A%84-class-%E5%85%B3%E9%94%AE%E5%AD%97%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F">类</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9F">模板字符串</a></li><li>对象属性的简写形式</li><li><a href="#%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">对象解构</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator">Generator</a></li><li><a href="#ES6-%E7%9A%84%E6%A8%A1%E5%9D%97%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">模块化</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">代理（Proxy）</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%EF%BC%9F">函数默认参数</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let">let</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const">const</a> 的块作用域</li></ul><h2 id="42-let-const-var-关键字有什么区别？"><a href="#42-let-const-var-关键字有什么区别？" class="headerlink" title="42. let, const, var 关键字有什么区别？"></a>42. <code>let, const, var</code> 关键字有什么区别？</h2><p>使用 <code>var</code> 声明的变量有 <em>声明提升</em>，没有块级作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">showX</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (showX) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="literal">false</span>)) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="literal">true</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>上面的代码在实际执行时大概是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">showX</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="comment">// 变量声明被提升至函数作用域的顶部，当前默认为 undefined</span></span><br><span class="line">    <span class="keyword">if</span> (showX) &#123;</span><br><span class="line">        x = <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="literal">false</span>)) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="literal">true</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><code>let</code> 和 <code>const</code> 声明的变量不存在变量提升，而且有块级作用域，所以上边的示例如果用 <code>let</code> 或 <code>const</code> 声明变量就会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">showX</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (showX) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="literal">true</span>)) <span class="comment">// Uncaught ReferenceError: x is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="literal">false</span>)) <span class="comment">// Uncaught ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure><p><code>const</code> 和 <code>let</code> 的不同就是，用 <code>const</code> 声明的变量无法重新赋值，这也意味着用 <code>const</code> 声明变量时必须同时对变量进行初始化。</p><h2 id="43-什么是箭头函数？"><a href="#43-什么是箭头函数？" class="headerlink" title="43. 什么是箭头函数？"></a>43. 什么是箭头函数？</h2><p><strong>箭头函数表达式</strong>是 ES6 的一个特性，它的语法比函数表达式更简洁，并且没有自己的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this"><code>this</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments"><code>arguments</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super"><code>super</code></a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target"><code>new.target</code></a>。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">var</span> getCurrentDate = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getCurrentDate1</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Date</span>() <span class="comment">// 不需要 return 关键字</span></span><br><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello &#x27;</span> + name + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">greet1</span> = name =&gt; <span class="string">`hello <span class="subst">$&#123;name&#125;</span>!`</span> <span class="comment">// 当只有一个参数时可以省略括号</span></span><br></pre></td></tr></table></figure><h2 id="44-ES6-的-class-关键字有什么用？"><a href="#44-ES6-的-class-关键字有什么用？" class="headerlink" title="44. ES6 的 class 关键字有什么用？"></a>44. ES6 的 <code>class</code> 关键字有什么用？</h2><p><code>class</code> 关键字用来声明一个类，它是编写构造函数的语法糖，底层仍然是使用 JS 的原型和基于原型的继承。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">firstName, lastName, age, address</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">address</span> = address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">self</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;[object Person]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getFullName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">firstName, lastName, age, address</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">address</span> = address</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">self</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[object Person]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getFullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="45-什么是模板字符串？"><a href="#45-什么是模板字符串？" class="headerlink" title="45. 什么是模板字符串？"></a>45. 什么是模板字符串？</h2><p>模板字符串是 ES6 出现的创建字符串的新方法，使用两个 “<strong>`</strong>“ 来创建字符串，在处理变量、换行等都更方便了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hi I\&#x27;m Mark&#x27;</span></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> greet1 = <span class="string">`Hi I\&#x27;m Mark`</span> <span class="comment">// 在字符串中使用 &#x27; 时不再需要转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> lastWords = <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    + <span class="string">&#x27;   I  \n&#x27;</span></span><br><span class="line">    + <span class="string">&#x27;   Am  \n&#x27;</span></span><br><span class="line">    + <span class="string">&#x27;Iron Man \n&#x27;</span></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> lastWords1 = <span class="string">`</span></span><br><span class="line"><span class="string">  I</span></span><br><span class="line"><span class="string">  Am</span></span><br><span class="line"><span class="string">  Iron Man   </span></span><br><span class="line"><span class="string">`</span> <span class="comment">// 换行不再需要 \n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + name + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">greet</span> = name =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span> !`</span> <span class="comment">// 变量或表达式不再需要用 + 拼接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="46-对象解构是什么？"><a href="#46-对象解构是什么？" class="headerlink" title="46. 对象解构是什么？"></a>46. 对象解构是什么？</h2><p>对象解构 一个是从数组或对象中提取变量的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> employee = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Marko&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Polo&quot;</span>,</span><br><span class="line">  <span class="attr">position</span>: <span class="string">&quot;Software Developer&quot;</span>,</span><br><span class="line">  <span class="attr">yearHired</span>: <span class="number">2017</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> firstName = employee.<span class="property">firstName</span></span><br><span class="line"><span class="keyword">let</span> lastName = employee.<span class="property">lastName</span></span><br><span class="line"><span class="keyword">let</span> position = employee.<span class="property">position</span></span><br><span class="line"><span class="keyword">let</span> yearHired = employee.<span class="property">yearHired</span></span><br></pre></td></tr></table></figure><p>以上代码用解构赋值可简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> employee = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;Marko&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;Polo&quot;</span>,</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&quot;Software Developer&quot;</span>,</span><br><span class="line">    <span class="attr">yearHired</span>: <span class="number">2017</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;firstName, lastName, position, yearHired&#125; = employee</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstName, lastName, position, yearHired)</span><br></pre></td></tr></table></figure><p>如果我们想在解构赋值的同时修改变量名可以写为 <code>propertyName:newName</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">firstName</span>: fName, </span><br><span class="line">  <span class="attr">lastName</span>: lName, </span><br><span class="line">  position, </span><br><span class="line">  yearHired</span><br><span class="line">&#125; = employee</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fName, lName, position, yearHired)</span><br></pre></td></tr></table></figure><p>我们也可以在结构时添加一个默认值，如果对象中对象的属性值为 <code>undefined</code>，则会使用默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">firstName</span>: fName = <span class="string">&#x27;Mark&#x27;</span>, </span><br><span class="line">    <span class="attr">lastName</span>: lName, </span><br><span class="line">    position, </span><br><span class="line">    yearHired</span><br><span class="line">&#125; = employee</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fName, lName, position, yearHired)</span><br></pre></td></tr></table></figure><h2 id="47-ES6-的模块是什么？"><a href="#47-ES6-的模块是什么？" class="headerlink" title="47. ES6 的模块是什么？"></a>47. ES6 的模块是什么？</h2><p>模块可以让我们把代码拆分为多个单独的文件，在需要的地方引入，能够提高可维护性。在 ES6 的模块系统出现之前就有 CommonJS 的模块系统。</p><p>ES5 CommonJS ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helper.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">isNull</span> = <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> val === <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">isUndefined</span> = <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> val === <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">isNullOrUndefined</span> = <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exports</span>.<span class="title function_">isNull</span>(val) || <span class="built_in">exports</span>.<span class="title function_">isUndefined</span>(val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; isNull, isUndefined, isNullOrUndefined &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./helpers.js&#x27;</span>)</span><br></pre></td></tr></table></figure><p>ES6 Module ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helper.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isNull</span>(<span class="params">val</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> val === <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isUndefined</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> val === <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isNullOrUndefined</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">isNull</span>(val) || <span class="title function_">isUndefined</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; isNull, isUndefined, isNullOrUndefined &#125; <span class="keyword">from</span> <span class="string">&#x27;./helpers.js&#x27;</span></span><br></pre></td></tr></table></figure><p>使用默认导出（一个文件只能有一个默认导出）：</p><p>ES5 CommonJS ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helper.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Helpers</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">isNull</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> val === <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">isUndefined</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> val === <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">isNullOrUndefined</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">isNull</span>(val) || <span class="variable language_">this</span>.<span class="title function_">isUndefined</span>(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Helpers</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Helpers</span> = <span class="built_in">require</span>(<span class="string">&#x27;./helpers.js&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Helpers</span>.<span class="title function_">isNull</span>(<span class="literal">null</span>));</span><br></pre></td></tr></table></figure><p>ES6 Module ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helper.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Helpers</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">isNull</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> val === <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">isUndefined</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> val === <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">isNullOrUndefined</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">isNull</span>(val) || <span class="variable language_">this</span>.<span class="title function_">isUndefined</span>(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Helpers</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Helpers</span> <span class="keyword">from</span> <span class="string">&#x27;.helpers.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Helpers</span>.<span class="title function_">isNull</span>(<span class="literal">null</span>))</span><br></pre></td></tr></table></figure><h2 id="48-Set-是什么？它有什么用？"><a href="#48-Set-是什么？它有什么用？" class="headerlink" title="48. Set 是什么？它有什么用？"></a>48. <code>Set</code> 是什么？它有什么用？</h2><p><code>Set</code> 对象是值的集合，它允许你存储任何类型的唯一值，无论是原始值或者是对象引用，<code>Set</code> <strong>中的元素是唯一的</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="keyword">const</span> set2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>我们可以用 <code>add</code> 方法在 <code>Set</code> 对象尾部添加一个元素，已经有的元素不会被重复添加，<code>add</code> 方法会返回这个 <code>Set</code> 对象，所以我们可以链式调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;b&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;c&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s) <span class="comment">// Set(3) &#123;&#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>使用 <code>delete</code> 方法从 <code>Set</code> 中移除一个元素，这个方法返回一个 <code>boolean</code> 值表示删除是否成功：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// 返回 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s) <span class="comment">// Set(2) &#123;&#x27;b&#x27;, &#x27;c&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// 返回 false，因为元素 &#x27;a&#x27; 已经不存在了</span></span><br></pre></td></tr></table></figure><p>使用 <code>has</code> 方法检查 <code>Set</code> 中是否有某个元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="string">&#x27;z&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>) <span class="comment">// 3  size 属性返回 Set 对象中的值的个数</span></span><br><span class="line">s.<span class="title function_">clear</span>() <span class="comment">// clear 方法用来清空 Set</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>我们可以利用 <code>Set</code> 给数组去重：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [&#x27;a&#x27;, 1, &#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="49-什么是回调函数？"><a href="#49-什么是回调函数？" class="headerlink" title="49. 什么是回调函数？"></a>49. 什么是回调函数？</h2><p>回调函数是作为实参传入另一个函数，将在稍后的某个时间调用的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="50-什么是-Promise？"><a href="#50-什么是-Promise？" class="headerlink" title="50. 什么是 Promise？"></a>50. 什么是 <code>Promise</code>？</h2><p><code>Promise</code> 是 JS 中处理异步的一种方式，它表示一个异步操作的最终完成（或失败）及其结果。在 <code>Promise</code> 出现之前我们只能使用回调函数来处理异步代码的问题。</p><p>一个 <code>Promise</code> 必然处于一下三种状态之一：</p><ul><li><em>待定（pending）</em>：初始状态，既没有被兑现，也没有被拒绝。</li><li><em>已兑现（fulfilled）</em>：意味着操作成功完成。</li><li><em>已拒绝（rejected）</em>：意味着操作失败。</li></ul><p><code>Promise</code> 构造函数有两个参数，分别是 <code>resolve</code> 和 <code>reject</code> 函数。一般当异步操作完成且没有错误，我们调用 <code>resolve</code> 返回执行结果，如果发生错误我们调用 <code>reject</code> 返回错误原因。我们可以通过 <code>.then</code> 方法获取异步执行的结果，在 <code>.catch</code> 方法中捕获执行的错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">readFileSync</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./index.html&#x27;</span>, &#123;&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">readFileSync</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="51-async-await-是什么？有什么用？"><a href="#51-async-await-是什么？有什么用？" class="headerlink" title="51. async/await 是什么？有什么用？"></a>51. async/await 是什么？有什么用？</h2><p><code>async/await</code> 是在 JS 中编写异步或非阻塞代码的方法，它比使用 <code>Promise</code> 或回调函数有更方便和清晰的语法。</p><p>使用 Promise：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callApi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&quot;url/to/api/endpoint&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">resp</span> =&gt;</span> resp.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 async/await</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">callApi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> resp = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;url/to/api/endpoint&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> resp.<span class="title function_">json</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>带有 async 关键字的函数会隐式的返回一个 Promise 对象，await 关键字只能在 async 函数中使用。</p></blockquote><h2 id="52-Spread-syntax和Rest-parameters有什么区别？"><a href="#52-Spread-syntax和Rest-parameters有什么区别？" class="headerlink" title="52. Spread syntax和Rest parameters有什么区别？"></a>52. Spread syntax和Rest parameters有什么区别？</h2><p>它们都使用相同的运算符 <code>...</code>，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">展开语法 (Spread syntax)</a>，可以在函数调用/数组构造时，将数组表达式或者 string 在语法层面展开；还可以在构造字面量对象时，将对象表达式按 <code>key-value</code> 的方式展开。<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters">剩余参数（Rest parameters）</a>语法允许我们将一个不定数量的参数表示为一个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> sum = <span class="title function_">add</span>(...nums)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum) <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...rest</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> rest.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, current</span>) =&gt;</span> total + current)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment">// logs 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">// logs 15</span></span><br><span class="line"><span class="keyword">const</span> [first, ...others] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(others) <span class="comment">// [2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parts = [<span class="string">&#x27;shoulders&#x27;</span>, <span class="string">&#x27;knees&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> lyrics = [<span class="string">&#x27;head&#x27;</span>, ...parts, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;toes&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lyrics) <span class="comment">// [&#x27;head&#x27;, &#x27;shoulders&#x27;, &#x27;knees&#x27;, &#x27;and&#x27;, &#x27;toes&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="53-什么是默认参数？"><a href="#53-什么是默认参数？" class="headerlink" title="53. 什么是默认参数？"></a>53. 什么是默认参数？</h2><p>在 ES6 中声明函数时可以给参数添加默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="comment">// function add(a, b) &#123;</span></span><br><span class="line"><span class="comment">//   a = a || 0</span></span><br><span class="line"><span class="comment">//   b = b || 0</span></span><br><span class="line"><span class="comment">//   return a + b</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a = <span class="number">0</span>, b = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以为默认参数使用解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFirst</span>(<span class="params">[first, ...rest] = [<span class="number">0</span>, <span class="number">1</span>]</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> first</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getFirst</span>() <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">getFirst</span>([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArr</span>(<span class="params">&#123; nums &#125; = &#123; nums: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getArr</span>() <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="title function_">getArr</span>(&#123; <span class="attr">nums</span>: [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>] &#125;) <span class="comment">// [5,4,3,2,1]</span></span><br></pre></td></tr></table></figure><p>我们还可以将先定义的参数用于后定义的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomethingWithValue</span>(<span class="params">value = <span class="string">&#x27;Hello World&#x27;</span>, callback = () =&gt; &#123; <span class="variable language_">console</span>.log(value) &#125;</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">doSomethingWithValue</span>() <span class="comment">// &quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><h2 id="54-什么是包装对象？"><a href="#54-什么是包装对象？" class="headerlink" title="54. 什么是包装对象？"></a>54. 什么是包装对象？</h2><p>除了 <code>null</code> 和 <code>undefined</code>，像 <code>string</code>，<code>number</code> 和 <code>boolean</code> 等这些原始数据类型，它们虽然不是 <code>object</code> 但也都有自己的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;marko&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> name) <span class="comment">//  &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">toUpperCase</span>()) <span class="comment">//  &quot;MARKO&quot;</span></span><br></pre></td></tr></table></figure><p>原因是它被临时的转为了一个对象，除了 <code>null</code> 和 <code>undefined</code> 所有原始类型都有自己的包装对象，创建的新对象在我们完成属性访问或方法调用后会被立即清除。</p><p>它实际工作时大概是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">String</span>(name).<span class="title function_">toUpperCase</span>())</span><br></pre></td></tr></table></figure><h2 id="55-隐式转换和显式转换有什么区别？"><a href="#55-隐式转换和显式转换有什么区别？" class="headerlink" title="55. 隐式转换和显式转换有什么区别？"></a>55. 隐式转换和显式转换有什么区别？</h2><p>隐式转换是指无需我们手动编码，在执行某些操作时值自动转为别的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="string">&#x27;6&#x27;</span>) <span class="comment">// 16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> + <span class="literal">true</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span> * <span class="string">&#x27;2&#x27;</span>) <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p>显示转换是指我们手动将值转换为我们想要的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="title class_">Number</span>(<span class="string">&#x27;6&#x27;</span>)) <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h2 id="56-NaN-是什么？怎么判断一个值是不是-NaN？"><a href="#56-NaN-是什么？怎么判断一个值是不是-NaN？" class="headerlink" title="56. NaN 是什么？怎么判断一个值是不是 NaN？"></a>56. <code>NaN</code> 是什么？怎么判断一个值是不是 <code>NaN</code>？</h2><p><code>NaN</code>（Not a Number）表示非数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(&#123;&#125;)) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>JS 有一个内置方法 <code>isNaN</code>，用于判断值是否为 <code>NaN</code>。但是这个方法有一些奇怪的行为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>()) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="literal">undefined</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(&#123;&#125;)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">String</span>(<span class="string">&#x27;a&#x27;</span>))) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="function">() =&gt;</span> &#123;&#125;)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以看到即使给出的值不是 <code>NaN</code> 也会返回 <code>true</code>，所以这里建议使用 <code>Number.isNaN</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>()) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">undefined</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(&#123;&#125;)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">String</span>(<span class="string">&#x27;a&#x27;</span>))) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="function">() =&gt;</span> &#123;&#125;)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>因为在 JS 中 <code>NaN</code> 是唯一一个不等于自身的值，所以我们也可以使用下面这个方法判断：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkIfNaN</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value !== value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="57-怎么判断一个值是不是数组？"><a href="#57-怎么判断一个值是不是数组？" class="headerlink" title="57. 怎么判断一个值是不是数组？"></a>57. 怎么判断一个值是不是数组？</h2><p>我们可以使用 <code>Array.isArray()</code> 来判断一个值是不是数组，它返回一个布尔值表示目标值是否数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="number">5</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="string">&#x27;&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>()) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="literal">null</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(&#123; <span class="attr">length</span>: <span class="number">5</span> &#125;)) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([])) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true  鲜为人知的事 Array.prototype 也是数组</span></span><br></pre></td></tr></table></figure><h2 id="58-怎么不使用-判断一个数值是否偶数？"><a href="#58-怎么不使用-判断一个数值是否偶数？" class="headerlink" title="58. 怎么不使用 % 判断一个数值是否偶数？"></a>58. 怎么不使用 <code>%</code> 判断一个数值是否偶数？</h2><p>可以使用<strong>按位与</strong>（<code>&amp;</code>）运算符，它在两个操作数对应的二进位都为1时，该位的结果才为1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">5</span> <span class="comment">// 00000000000000000000000000000101</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">4</span> <span class="comment">// 00000000000000000000000000000100</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">1</span> <span class="comment">// 00000000000000000000000000000011</span></span><br><span class="line"><span class="comment">// a &amp; c       00000000000000000000000000000001</span></span><br><span class="line"><span class="comment">// b &amp; c       00000000000000000000000000000000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a &amp; c) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b &amp; c) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>所以我们可以利用 <code>&amp;</code> 来判断：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEven</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>(<span class="number">3</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>(<span class="number">8</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>(<span class="number">0</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果这个方法难以理解，我们也可以使用一个递归函数来解决这个问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEven</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span> || num === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">isEven</span>(num - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>(<span class="number">3</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>(<span class="number">8</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEven</span>(<span class="number">0</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="59-如何判断对象中是否存在某个属性？"><a href="#59-如何判断对象中是否存在某个属性？" class="headerlink" title="59. 如何判断对象中是否存在某个属性？"></a>59. 如何判断对象中是否存在某个属性？</h2><ul><li><p>使用 <code>in</code> 运算符，语法为 <code>propName in obj</code> 如果对象中存在返回 <code>true</code>，否则返回 <code>false</code>；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&#x27;bwahahah&#x27;</span>,</span><br><span class="line">    <span class="attr">prop2</span>: <span class="string">&#x27;hweasa&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;prop&#x27;</span> <span class="keyword">in</span> obj) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;prop1&#x27;</span> <span class="keyword">in</span> obj) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>使用对象的 <code>hasOwnProperty</code> 方法，它返回一个布尔值，表示对象中是否存在某个属性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;prop2&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;prop1&#x27;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>obj[propName]</code>，如果对象中不存在该属性会返回 <code>undefined</code>；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="string">&#x27;prop&#x27;</span>]) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o[<span class="string">&#x27;prop1&#x27;</span>]) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="60-Ajax-是什么？"><a href="#60-Ajax-是什么？" class="headerlink" title="60. Ajax 是什么？"></a>60. Ajax 是什么？</h2><p>Ajax（Asynchronous JavaScript and XML）是一组用于异步显示数据的相关技术，当使用结合了这些技术的 Ajax 模型以后，网页应用能够快速地将增量更新呈现在用户界面上，而不需要重载（刷新）整个页面。</p><blockquote><p>尽管 X 在 Ajax 中代表 XML，但由于 JSON 的许多优势，比如更加轻量以及作为 Javascript 的一部分，目前 JSON 的使用比 XML 更加普遍。</p></blockquote><h2 id="61-创建对象的几种方式？"><a href="#61-创建对象的几种方式？" class="headerlink" title="61. 创建对象的几种方式？"></a>61. 创建对象的几种方式？</h2><ul><li><p>使用对象字面量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Mark&#x27;</span>,</span><br><span class="line">    <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hi, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="title function_">greeting</span>()) <span class="comment">// Hi, I&#x27;m Mark</span></span><br></pre></td></tr></table></figure></li><li><p>使用构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greeting</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hi, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mark = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Mark&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mark.<span class="title function_">greeting</span>()) <span class="comment">// Hi, I&#x27;m Mark</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>Object.create()</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = &#123;</span><br><span class="line">    <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hi, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = <span class="title class_">Object</span>.<span class="title function_">create</span>(n)</span><br><span class="line"></span><br><span class="line">o.<span class="property">name</span> = <span class="string">&#x27;Mark&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="title function_">greeting</span>()) <span class="comment">// Hi, I&#x27;m Mark</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="62-Object-seal-和-Object-freeze-有什么区别？"><a href="#62-Object-seal-和-Object-freeze-有什么区别？" class="headerlink" title="62. Object.seal 和 Object.freeze 有什么区别？"></a>62. <code>Object.seal</code> 和 <code>Object.freeze</code> 有什么区别？</h2><ul><li><strong><code>Object.seal()</code></strong> 方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置，属性值如果原来是可写的就可以改变。</li><li><strong><code>Object.freeze()</code></strong> 方法冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。</li></ul><h2 id="63-使用-in-运算符和-hasOwnProperty-有什么区别？"><a href="#63-使用-in-运算符和-hasOwnProperty-有什么区别？" class="headerlink" title="63. 使用 in 运算符和 hasOwnProperty 有什么区别？"></a>63. 使用 <code>in</code> 运算符和 <code>hasOwnProperty</code> 有什么区别？</h2><p>它们都能用来验证对象是否存在某个属性，它们的区别在于 <code>in</code> 运算符会在对象自身找不到对应属性时继续查找它的原型链，而  <code>hasOwnProperty</code> 只在对象自身查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zxx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> obj) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="64-JS-中处理异步代码有哪些方法？"><a href="#64-JS-中处理异步代码有哪些方法？" class="headerlink" title="64. JS 中处理异步代码有哪些方法？"></a>64. JS 中处理异步代码有哪些方法？</h2><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%EF%BC%9F">回调函数</a>；</li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-Promise%EF%BC%9F">Promise</a>；</li><li><a href="#async-await-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F">async / await</a>;</li></ul><h2 id="65-函数表达式和函数声明有什么区别？"><a href="#65-函数表达式和函数声明有什么区别？" class="headerlink" title="65. 函数表达式和函数声明有什么区别？"></a>65. 函数表达式和函数声明有什么区别？</h2><p>先看一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">hoistedFunc</span>() <span class="comment">// I am hoisted</span></span><br><span class="line"><span class="title function_">notHoistedFunc</span>() <span class="comment">// Uncaught TypeError: notHoistedFunc is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hoistedFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am hoisted&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notHoistedFunc = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I will not be hoisted!&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 函数声明 会将整个函数提升，而函数表达式相当于把函数赋给了一个变量，只会对<a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%EF%BC%9F">变量的声明提升</a>。</p><h2 id="66-函数有几种调用的方式？"><a href="#66-函数有几种调用的方式？" class="headerlink" title="66. 函数有几种调用的方式？"></a>66. 函数有几种调用的方式？</h2><p>JS 中有4种方法可以调用函数，调用方式决定了函数 <code>this</code> 或函数所有者对象的值；</p><ul><li><p>作为函数调用 - 如果函数不是作为方法、构造函数或使用 <code>apply</code>，<code>call</code> 方法调用的，那么它将作为函数调用。此函数的所有者对象将是 <code>window</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">5</span>) <span class="comment">// window  返回 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="title function_">method</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">method</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>作为方法的调用 - 如果对象的属性具有函数值，我们将其称为方法。当调用该方法时，该方法的 <code>this</code> 值将是该对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> details = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Marko&#x27;</span>,</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">details.<span class="title function_">getName</span>() <span class="comment">// Marko</span></span><br></pre></td></tr></table></figure></li><li><p>作为构造函数调用 - 如果一个函数在它之前使用 <code>new</code> 关键字调用，那么它被称为函数构造函数。将创建一个空对象，this 将指向该对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Employee</span>(<span class="params">name, position, yearHired</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个空对象 &#123;&#125;</span></span><br><span class="line">    <span class="comment">// 把 this 指向这个空对象</span></span><br><span class="line">    <span class="comment">// this =&gt; &#123;&#125;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span> = position</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">yearHired</span> = yearHired</span><br><span class="line">    <span class="comment">// 继承自 Employee.prototype</span></span><br><span class="line">    <span class="comment">// 如果没有指定显式的返回值  则隐式返回 this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emp = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&#x27;Marko Polo&#x27;</span>, <span class="string">&#x27;Software Developer&#x27;</span>, <span class="number">2017</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>apply</code> 或 <code>call</code> 方法调用 - 如果我们想明确指定函数的 <code>this</code> 值或所有者对象，我们可以使用这些方法调用函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">result</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">result</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reduceAdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = <span class="variable language_">arguments</span>.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        result += <span class="variable language_">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reduceAdd.<span class="title function_">apply</span>(obj1, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) <span class="comment">// reduceAdd 执行时函数内 this 指向 obj1 对象</span></span><br><span class="line">reduceAdd.<span class="title function_">call</span>(obj2, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// reduceAdd 执行时函数内 this 指向 obj2 对象</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="67-什么是记忆化函数？它有什么用？"><a href="#67-什么是记忆化函数？它有什么用？" class="headerlink" title="67. 什么是记忆化函数？它有什么用？"></a>67. 什么是记忆化函数？它有什么用？</h2><p>记忆化（memoization）是构建一个函数的过程该函数能够记住它之前计算的结果或值。用途是如果该函数已经在上次使用相同参数的计算中执行过，我们就可以避免该函数的计算。这能够节省时间，但也会消耗更多的内存来保存之前执行的结果。</p><h2 id="68-实现一个记忆化辅助函数。"><a href="#68-实现一个记忆化辅助函数。" class="headerlink" title="68. 实现一个记忆化辅助函数。"></a>68. 实现一个记忆化辅助函数。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> slice = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">memoize</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> params = slice.<span class="title function_">call</span>(args)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line">        <span class="keyword">if</span> (cache[params]) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cached&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> cache[params]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="title function_">fn</span>(...args)</span><br><span class="line">            cache[params] = result</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`not cached`</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">makeFullName</span> = (<span class="params">fName, lName</span>) =&gt; <span class="string">`<span class="subst">$&#123;fName&#125;</span> <span class="subst">$&#123;lName&#125;</span>`</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reduceAdd</span> = (<span class="params">numbers, startingValue = <span class="number">0</span></span>) =&gt;</span><br><span class="line">numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, cur</span>) =&gt;</span> total + cur, startingValue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> memoizedMakeFullName = <span class="title function_">memoize</span>(makeFullName)</span><br><span class="line"><span class="keyword">const</span> memoizedReduceAdd = <span class="title function_">memoize</span>(reduceAdd)</span><br><span class="line"></span><br><span class="line"><span class="title function_">memoizedMakeFullName</span>(<span class="string">&#x27;Marko&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>)</span><br><span class="line"><span class="title function_">memoizedMakeFullName</span>(<span class="string">&#x27;Marko&#x27;</span>, <span class="string">&#x27;Polo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">memoizedReduceAdd</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">5</span>)</span><br><span class="line"><span class="title function_">memoizedReduceAdd</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="69-为什么-typeof-null-会返回-object？怎么判断一个值是否-null？"><a href="#69-为什么-typeof-null-会返回-object？怎么判断一个值是否-null？" class="headerlink" title="69. 为什么 typeof null 会返回 object？怎么判断一个值是否 null？"></a>69. 为什么 <code>typeof null</code> 会返回 <code>object</code>？怎么判断一个值是否 <code>null</code>？</h2><p>简单来说，<code>typeof null</code> 的结果为 <code>Object</code> 是 JS 设计之初的一个 <code>bug</code>。后来提议将 <code>typeof null == &#39;object&#39;</code> 更改为 <code>typeof null == &#39;null&#39;</code> 但被拒绝了，因为这会给现有项目和软件带来更多错误。</p><p>我们可以使用 <code>===</code> 来判断一个值是否 <code>null</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isNull</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="70-JS-中的-new-关键字有什么用？"><a href="#70-JS-中的-new-关键字有什么用？" class="headerlink" title="70. JS 中的 new 关键字有什么用？"></a>70. JS 中的 <code>new</code> 关键字有什么用？</h2><p><code>new</code> 关键字用于创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Employee</span>(<span class="params">name, position, yearHired</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span> = position</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">yearHired</span> = yearHired</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emp = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&#x27;Marko Polo&#x27;</span>, <span class="string">&#x27;Software Developer&#x27;</span>, <span class="number">2017</span>)</span><br></pre></td></tr></table></figure><p>在上面这个例子中 <code>new</code> 关键字做了四件事：</p><ol><li>创建一个空对象（<code>&#123;&#125;</code>）；</li><li>为创建的空对象添加属性 <code>__proto__</code>，将该属性链接至构造函数的原型对象；</li><li>将步骤1创建的对象作为 <code>this</code> 的上下文；</li><li>如果该函数没有指定返回值，则返回 <code>this</code>。</li></ol><p>当代码 <code>new Employee()</code> 执行时，会发生一下几件事：</p><ol><li>一个继承自 <code>Employee.prototype</code> 的新对象被创建。</li><li>使用指定的参数调用构造函数 <code>Employee</code>，并将 <code>this</code> 绑定到新创建的对象。<code>new Employee</code> 等同于 <code>new Employee()</code>，也就是没有指定参数列表，<code>Employee</code> 不带任何参数调用的情况。</li><li>由构造函数返回的对象就是 <code>new</code> 表达式的结果。如果构造函数没有显式返回一个对象，则使用步骤 1 创建的对象。</li></ol><blockquote><p><strong>链接</strong> 🔗<br><a href="https://dev.to/macmacky/70-javascript-interview-questions-5gfi#56-what-is-nan-and-how-to-check-if-a-value-is-nan">70 JavaScript Interview Questions</a><br><a href="https://developer.mozilla.org/">MDN</a><br><a href="https://wangdoc.com/javascript/">Javascript 教程 - 网道</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git rebase 用法详解与工作原理(转载)</title>
      <link href="/posts/dfe0e190/"/>
      <url>/posts/dfe0e190/</url>
      
        <content type="html"><![CDATA[<p>以前对 <code>git rebase -i</code> 的用法一直是一知半解，一次在需要合并多个提交时刚好用到，一顿操作差点把提交都搞丢了，幸好后面顺利找回，因此记录一下学习 <code>rebase</code> 命令的过程。</p><h2 id="理解-Rebase-命令"><a href="#理解-Rebase-命令" class="headerlink" title="理解 Rebase 命令"></a>理解 Rebase 命令</h2><p><code>git rebase</code> 命令的文档描述是 <code>Reapply commits on top of another base tip</code>，从字面上理解是「在另一个基端之上重新应用提交」，这个定义听起来有点抽象，换个角度可以理解为「将分支的基础从一个提交改成另一个提交，使其看起来就像是从另一个提交中创建了分支一样」，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202302081158447.png" alt="git-rebase.png"></p><p>假设我们从 <code>Master</code> 的提交 A 创建了 <code>Feature</code> 分支进行新的功能开发，这时 A 就是 <code>Feature</code> 的基端。接着 <code>Matser</code> 新增了两个提交 B 和 C， <code>Feature</code> 新增了两个提交 D 和 E。现在我们出于某种原因，比如新功能的开发依赖 B、C 提交，需要将 <code>Master</code> 的两个新提交整合到 <code>Feature</code> 分支，为了保持提交历史的整洁，我们可以切换到 <code>Feature</code> 分支执行 <code>rebase</code> 操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase master</span><br></pre></td></tr></table></figure><p><code>rebase</code> 的执行过程是首先找到这两个分支（即当前分支 <code>Feature</code>、 <code>rebase</code> 操作的目标基底分支 <code>Master</code>） 的最近共同祖先提交 A，然后对比当前分支相对于该祖先提交的历次提交（D 和 E），提取相应的修改并存为临时文件，然后将当前分支指向目标基底 <code>Master</code> 所指向的提交 C, 最后以此作为新的基端将之前另存为临时文件的修改依序应用。</p><p>我们也可以按上文理解成将 <code>Feature</code> 分支的基础从提交 A 改成了提交 C，看起来就像是从提交 C 创建了该分支，并提交了 D 和 E。但实际上这只是「看起来」，在内部 Git 复制了提交 D 和 E 的内容，创建新的提交 D’ 和 E’ 并将其应用到特定基础上（A→B→C）。尽管新的 <code>Feature</code> 分支和之前看起来是一样的，但它是由全新的提交组成的。</p><p><code>rebase</code> 操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。</p><h2 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h2><p><code>rebase</code> 通常用于重写提交历史。下面的使用场景在大多数 Git 工作流中是十分常见的：</p><ul><li>我们从 <code>master</code> 分支拉取了一条 <code>feature</code> 分支在本地进行功能开发</li><li>远程的 <code>master</code> 分支在之后又合并了一些新的提交</li><li>我们想在 <code>feature</code> 分支集成 <code>master</code> 的最新更改</li></ul><h3 id="rebase-和-merge-的区别"><a href="#rebase-和-merge-的区别" class="headerlink" title="rebase 和 merge 的区别"></a>rebase 和 merge 的区别</h3><p>以上场景同样可以使用 <code>merge</code> 来达成目的，但使用 <code>rebase</code> 可以使我们保持一个线性且更加整洁的提交历史。假设我们有如下分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  D---E feature</span><br><span class="line"> /</span><br><span class="line">A---B---C master</span><br></pre></td></tr></table></figure><p>现在我们将分别使用 <code>merge</code> 和 <code>rebase</code>，把 <code>master</code> 分支的 B、C 提交集成到 <code>feature</code> 分支，并在 <code>feature</code> 分支新增一个提交 F，然后再将 <code>feature</code> 分支合入 <code>master</code> ，最后对比两种方法所形成的提交历史的区别。</p><ul><li><p>使用 <code>merge</code></p><ol><li>切换到 <code>feature</code> 分支： <code>git checkout feature</code>。</li><li>合并 <code>master</code> 分支的更新： <code>git merge master</code>。</li><li>新增一个提交 F： <code>git add . &amp;&amp; git commit -m &quot;commit F&quot;</code> 。</li><li>切回 <code>master</code> 分支并执行快进合并： <code>git chekcout master &amp;&amp; git merge feature</code>。</li></ol><p>执行过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202302081159353.gif" alt="Dec-30-2020-merge-example"></p><p>我们将得到如下提交历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* 6fa5484 (HEAD -&gt; master, feature) commit F</span><br><span class="line">*   875906b Merge branch <span class="string">&#x27;master&#x27;</span> into feature</span><br><span class="line">|\  </span><br><span class="line">| | 5b05585 commit E</span><br><span class="line">| | f5b0fc0 commit D</span><br><span class="line">* * d017dff commit C</span><br><span class="line">* * 9df916f commit B</span><br><span class="line">|/  </span><br><span class="line">* cb932a6 commit A</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>rebase</code></p><p>步骤与使用 <code>merge</code> 基本相同，唯一的区别是第 2 步的命令替换成： <code>git rebase master</code>。</p><p>执行过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202302081159624.gif" alt="Dec-30-2020-rebase-example"></p><p>我们将得到如下提交历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 74199ce (HEAD -&gt; master, feature) commit F</span><br><span class="line">* e7c7111 commit E</span><br><span class="line">* d9623b0 commit D</span><br><span class="line">* 73deeed commit C</span><br><span class="line">* c50221f commit B</span><br><span class="line">* ef13725 commit A</span><br></pre></td></tr></table></figure></li></ul><p>可以看到，使用 <code>rebase</code> 方法形成的提交历史是完全线性的，同时相比 <code>merge</code> 方法少了一次 <code>merge</code> 提交，看上去更加整洁。</p><h3 id="为什么要保持提交历史的整洁"><a href="#为什么要保持提交历史的整洁" class="headerlink" title="为什么要保持提交历史的整洁"></a>为什么要保持提交历史的整洁</h3><p>一个看上更整洁的提交历史有什么好处？</p><ol><li>满足某些开发者的洁癖。</li><li>当你因为某些 bug 需要回溯提交历史时，更容易定位到 bug 是从哪一个提交引入。尤其是当你需要通过 <code>git bisect</code> 从几十上百个提交中排查 bug，或者有一些体量较大的功能分支需要频繁的从远程的主分支拉取更新时。</li></ol><p>使用 <code>rebase</code> 来将远程的变更整合到本地仓库是一种更好的选择。用 <code>merge</code> 拉取远程变更的结果是，每次你想获取项目的最新进展时，都会有一个多余的 <code>merge</code> 提交。而使用 <code>rebase</code> 的结果更符合我们的本意：我想在其他人的已完成工作的基础上进行我的更改。</p><h3 id="其他重写提交历史的方法"><a href="#其他重写提交历史的方法" class="headerlink" title="其他重写提交历史的方法"></a>其他重写提交历史的方法</h3><p>当我们仅仅只想修改最近的一次提交时，使用 <code>git commit --amend</code> 会更加方便。</p><p>它适用于以下场景：</p><ul><li>我们刚刚完成了一次提交，但还没有推送到公共的分支。</li><li>突然发现上个提交还留了些小尾巴没有完成，比如一行忘记删除的注释或者一个很小的笔误，我们可以很快速的完成修改，但又不想再新增一个单独的提交。</li><li>或者我们只是觉得上一次提交的提交信息写的不够好，想做一些修改。</li></ul><p>这时候我们可以添加新增的修改（或跳过），使用 <code>git commit --amend</code> 命令执行提交，执行后会进入一个新的编辑器窗口，可以对上一次提交的提交信息进行修改，保存后就会将所做的这些更改应用到上一次提交。</p><p>如果我们已经将上一次提交推送到了远程的分支，现在再执行推送将会提示出错并被拒绝，在确保该分支不是一个公共分支的前提下，我们可以使用 <code>git push --force</code> 强制推送。</p><p>注意与 <code>rebase</code> 一样，Git 在内部并不会真正地修改并替换上一个提交，而是创建了一个全新的提交并重新指向这个新的提交。</p><h2 id="使用-rebase-的交互模式重写提交历史"><a href="#使用-rebase-的交互模式重写提交历史" class="headerlink" title="使用 rebase 的交互模式重写提交历史"></a>使用 rebase 的交互模式重写提交历史</h2><p><code>git rebase</code> 命令有标准和交互两种模式，之前的示例我们用的都是默认的标准模式，在命令后添加 <code>-i</code> 或 <code>--interactive</code> 选项即可使用交互模式。</p><h3 id="两种模式的区别"><a href="#两种模式的区别" class="headerlink" title="两种模式的区别"></a>两种模式的区别</h3><p>我们前面提到， <code>rebase</code> 是「在另一个基端之上重新应用提交」，而在重新应用的过程中，这些提交会被重新创建，自然也可以进行修改。在 <code>rebase</code> 的标准模式下，当前工作分支的提交会被直接应用到传入分支的顶端；而在交互模式下，则允许我们在重新应用之前通过编辑器以及特定的命令规则对这些提交进行合并、重新排序及删除等重写操作。</p><p>两者最常见的使用场景也因此有所不同：</p><ol><li>标准模式常用于在当前分支中集成来自其他分支的最新修改。</li><li>交互模式常用于对当前分支的提交历史进行编辑，如将多个小提交合并成大的提交。</li></ol><h3 id="不仅仅是分支"><a href="#不仅仅是分支" class="headerlink" title="不仅仅是分支"></a>不仅仅是分支</h3><p>虽然我们之前的示例都是在不同的两个分支之间执行 rebase 操作，但事实上 rebase 命令传入的参数并不仅限于分支。</p><p>任何的提交引用，都可以被视作有效的 <code>rebase</code> 基底对象，包括一个提交 ID、分支名称、标签名称或 <code>HEAD~1</code> 这样的相对引用。</p><p>自然地，假如我们对当前分支的某次历史提交执行 <code>rebase</code>，其结果就是会将这次提交之后的所有提交重新应用在当前分支，在交互模式下，即允许我们对这些提交进行更改。</p><h3 id="重写提交历史"><a href="#重写提交历史" class="headerlink" title="重写提交历史"></a>重写提交历史</h3><p>终于进入到本文的主题，前面提到，假如我们在交互模式对当前分支的某次提交执行 <code>rebase</code>，即（间接）实现了对这次提交之后的所有提交进行重写。接下来我们将通过下面的示例进行详细介绍。</p><p>假设我们在 <code>feature</code> 分支有如下提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">74199cebdd34d107bb67b6da5533a2e405f4c330 (HEAD -&gt; feature) commit F</span><br><span class="line">e7c7111d807c1d5209b97a9c75b09da5cd2810d4 commit E</span><br><span class="line">d9623b0ef9d722b4a83d58a334e1ce85545ea524 commit D</span><br><span class="line">73deeedaa944ef459b17d42601677c2fcc4c4703 commit C</span><br><span class="line">c50221f93a39f3474ac59228d69732402556c93b commit B</span><br><span class="line">ef1372522cdad136ce7e6dc3e02aab4d6ad73f79 commit A</span><br></pre></td></tr></table></figure><p>接下来我们将要执行的操作是：</p><ul><li>将 B、C 合并为一个新的提交 ，并仅保留原提交 C 的提交信息</li><li>删除提交 D</li><li>将提交 E 移动到提交 F 之后并重新命名（即修改提交信息）为提交 H</li><li>在提交 F 中加入一个新的文件更改，并重新命名为提交 G</li></ul><p>由于我们需要修改的提交是 B→C→D→E，因此我们需要将提交 A 作为新的「基端」，提交 A 之后的所有提交会被重新应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i ef1372522cdad136ce7e6dc3e02aab4d6ad73f79 <span class="comment"># 参数是提交 A 的 ID</span></span><br></pre></td></tr></table></figure><p>接下来会进入到如下的编辑器界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pick c50221f commit B</span><br><span class="line">pick 73deeed commit C</span><br><span class="line">pick d9623b0 commit D</span><br><span class="line">pick e7c7111 commit E</span><br><span class="line">pick 74199ce commit F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变基 ef13725..74199ce 到 ef13725（5 个提交）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 命令:</span></span><br><span class="line"><span class="comment"># p, pick &lt;提交&gt; = 使用提交</span></span><br><span class="line"><span class="comment"># r, reword &lt;提交&gt; = 使用提交，但修改提交说明</span></span><br><span class="line"><span class="comment"># e, edit &lt;提交&gt; = 使用提交，进入 shell 以便进行提交修补</span></span><br><span class="line"><span class="comment"># s, squash &lt;提交&gt; = 使用提交，但融合到前一个提交</span></span><br><span class="line"><span class="comment"># f, fixup &lt;提交&gt; = 类似于 &quot;squash&quot;，但丢弃提交说明日志</span></span><br><span class="line"><span class="comment"># x, exec &lt;命令&gt; = 使用 shell 运行命令（此行剩余部分）</span></span><br><span class="line"><span class="comment"># b, break = 在此处停止（使用 &#x27;git rebase --continue&#x27; 继续变基）</span></span><br><span class="line"><span class="comment"># d, drop &lt;提交&gt; = 删除提交</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>（注意上面提交 ID 之后的提交信息只起到描述作用，在这里修改它们不会有任何效果。）</p><p>具体的操作命令在编辑器的注释中已解释的相当详细，所以我们直接进行如下操作：</p><ol><li><p>对提交 B、C 作如下修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick c50221f commit B</span><br><span class="line">f 73deeed commit C</span><br></pre></td></tr></table></figure><p>由于提交 B 是这些提交中的第一个，因此我们无法对其执行 <code>squash</code> 或者 <code>fixup</code> 命令（没有前一个提交了），我们也不需要对提交 B 执行 <code>reword</code> 命令以修改其提交信息，因为之后在将提交 C 融合到提交 B 中时，会允许我们对融合之后的提交信息进行修改。</p><p>注意该界面提交的展示顺序是从上到下由旧到新，因此我们将提交 C 的命令改为 <code>s（或 squash）</code> 或者 <code>f（或 fixup）</code> 会将其融合到（上方的）前一个提交 B，两个命令的区别为是否保留 C 的提交信息。</p></li><li><p>删除提交 D：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d d9623b0 commit D</span><br></pre></td></tr></table></figure></li><li><p>移动提交 E 到提交 F 之后并修改其提交信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick 74199ce commit F</span><br><span class="line">r e7c7111 commit E</span><br></pre></td></tr></table></figure></li><li><p>在提交 F 中加入一个新的文件更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e 74199ce commit F</span><br></pre></td></tr></table></figure></li><li><p>保存退出。</p></li></ol><p>接下来会按照从上到下的顺序依次执行我们对每一个提交所修改或保留的命令：</p><ol><li><p>对提交 B 的 <code>pick</code> 命令会自动执行，因此不需要交互。</p></li><li><p>接着执行对提交 C 的 <code>squash</code> 命令，会进入一个新的编辑器界面允许我们修改合并了B、C 之后的提交信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个 2 个提交的组合。</span></span><br><span class="line"><span class="comment"># 这是第一个提交说明：</span></span><br><span class="line"></span><br><span class="line">commit B</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是提交说明 #2：</span></span><br><span class="line"></span><br><span class="line">commit C</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>我们将 <code>commit B</code> 这一行删除后保存退出，融合之后的提交将使用 <code>commit C</code> 作为提交信息。</p></li><li><p>对提交 D 的 <code>drop</code> 操作也会自动执行，没有交互步骤。</p></li><li><p>执行 <code>rebase</code> 的过程中可能会发生冲突，这时候 <code>rebase</code> 会暂时中止，需要我们编辑冲突的文件去手动合并冲突。解决冲突后通过 <code>git add/rm &lt;conflicted_files&gt;</code> 将其标记为已解决，然后执行 <code>git rebase --continue</code> 可以继续之后的 <code>rebase</code> 步骤；或者也可以执行 <code>git rebase --abort</code> 放弃 <code>rebase</code> 操作并恢复到操作之前的状态。</p></li><li><p>由于我们上移了提交 F 的位置，因此接下来将执行对 F 的 <code>edit</code> 操作。这时将进入一个新的 Shell 会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">停止在 74199ce... commit F</span><br><span class="line">您现在可以修补这个提交，使用</span><br><span class="line"></span><br><span class="line">  git commit --amend </span><br><span class="line"></span><br><span class="line">当您对变更感到满意，执行</span><br><span class="line"></span><br><span class="line">  git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>我们添加一个新的代码文件并执行 <code>git commit --amend</code> 将其合并到当前的上一个提交（即 F），然后在编辑器界面中将其提交信息修改为 <code>commit G</code>，最后执行 <code>git rebase --continue</code> 继续 <code>rebase</code> 操作。</p></li><li><p>最后执行对提交 E 的 <code>reword</code> 操作，在编辑器界面中将其提交信息修改为 <code>commit H</code> 。</p></li></ol><p>大功告成！最后让我们确认一下 <code>rebase</code> 之后的提交历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">64710dc88ef4fbe8fe7aac206ec2e3ef12e7bca9 (HEAD -&gt; feature) commit H</span><br><span class="line">8ab4506a672dac5c1a55db34779a185f045d7dd3 commit G</span><br><span class="line">1e186f890710291aab5b508a4999134044f6f846 commit C</span><br><span class="line">ef1372522cdad136ce7e6dc3e02aab4d6ad73f79 commit A</span><br></pre></td></tr></table></figure><p>完全符合预期，同时也可以看到提交 A之后的所有提交 ID 都已经发生了改变，这也印证了我们之前所说的 Git 重新创建了这些提交。</p><h2 id="Rebase-的进阶用法"><a href="#Rebase-的进阶用法" class="headerlink" title="Rebase 的进阶用法"></a>Rebase 的进阶用法</h2><h3 id="合并之前执行-rebase"><a href="#合并之前执行-rebase" class="headerlink" title="合并之前执行 rebase"></a>合并之前执行 rebase</h3><p>另一种使用 <code>rebase</code> 的常见场景是在推送到远程进行合并之前执行 <code>rebase</code>，一般这样做的目的是为了确保提交历史的整洁。</p><p>我们首先在自己的功能分支里进行开发，当开发完成时需要先将当前功能分支 <code>rebase</code> 到最新的主分支上，提前解决可能出现的冲突，然后再向远程提交修改。 这样的话，远程仓库的主分支维护者就不再需要进行整合且创建一条额外的 <code>merge</code> 提交，只需要执行快进合并即可。即使是在多个分支并行开发的情况，最终也能得到一条完全线性的提交历史。</p><h3 id="rebase-到其他分支"><a href="#rebase-到其他分支" class="headerlink" title="rebase 到其他分支"></a>rebase 到其他分支</h3><p>我们可以通过 <code>rebase</code> 对两个分支进行对比，取出相应的修改，然后应用到另一个分支上。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    F---G patch</span><br><span class="line">   /</span><br><span class="line">  D---E feature</span><br><span class="line"> /</span><br><span class="line">A---B---C master</span><br></pre></td></tr></table></figure><p>假设我们基于 <code>feature</code> 分支的提交 D 创建了分支 <code>patch</code>，并且新增了提交 F、G，现在我们想将 <code>patch</code> 所做的更改合并到 <code>master</code> 并发布，但暂时还不想合并 <code>feature</code> ，这种情况下可以使用 <code>rebase</code> 的 <code>--onto &lt;branch&gt;</code> 选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase —onto master feature patch</span><br></pre></td></tr></table></figure><p>以上操作将取出 <code>patch</code> 分支，对比它基于 <code>feature</code> 所做的更改， 然后把这些更改在 <code>master</code> 分支上重新应用，让 <code>patch</code> 看起来就像直接基于 <code>master</code> 进行更改一样。执行后的 <code>patch</code> 如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A---B---C---F<span class="string">&#x27;---G&#x27;</span> patch</span><br></pre></td></tr></table></figure><p>然后我们可以切换到 <code>master</code> 分支，并对 <code>patch</code> 执行快进合并：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge patch</span><br></pre></td></tr></table></figure><h3 id="通过-rebase-策略执行-git-pull"><a href="#通过-rebase-策略执行-git-pull" class="headerlink" title="通过 rebase 策略执行 git pull"></a>通过 rebase 策略执行 <code>git pull</code></h3><p>Git 在最近的某个版本起，直接运行 <code>git pull</code> 会有如下提示消息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">warning: 不建议在没有为偏离分支指定合并策略时执行 pull 操作。 您可以在执行下一次 pull 操作之前执行下面一条命令来抑制本消息：</span><br><span class="line"></span><br><span class="line">  git config pull.rebase <span class="literal">false</span>  <span class="comment"># 合并（缺省策略）</span></span><br><span class="line">  git config pull.rebase <span class="literal">true</span>   <span class="comment"># 变基</span></span><br><span class="line">  git config pull.ff only       <span class="comment"># 仅快进</span></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>原来 <code>git pull</code> 时也可以通过 <code>rebase</code> 来进行合并，这是因为 <code>git pull</code> 实际上等于 <code>git fetch</code> + <code>git merge</code> ，我们可以在第二步直接用 <code>git rebase</code> 替换 <code>git merge</code>来合并 <code>fetch</code> 取得的变更，作用同样是避免额外的 <code>merge</code> 提交以保持线性的提交历史。</p><p>两者的区别在上文中已进行过对比，我们可以把对比示例中的 <code>Matser</code> 分支当成远程分支，把 <code>Feature</code> 分支当成本地分支，当我们在本地执行 <code>git pull</code> 时，其实就是拉取 <code>Master</code> 的更改然后合并到 <code>Feature</code> 分支。如果两个分支都有不同的提交，默认的 <code>git merge</code> 方式会生成一个单独的 merge 提交以整合这些提交；而使用 <code>git rebase</code> 则相当于基于远程分支的最新提交重新创建本地分支，然后再重新应用本地所添加的提交。</p><p>具体的使用方式有多种：</p><ul><li>每次执行 pull 命令时添加特定选项： <code>git pull --rebase</code> 。</li><li>为当前仓库设定配置项： <code>git config pull.rebase true</code>，在 <code>git config</code> 后添加 <code>--global</code> 选项可以使该配置项对所有仓库生效。</li></ul><h2 id="潜在弊端和反对意见"><a href="#潜在弊端和反对意见" class="headerlink" title="潜在弊端和反对意见"></a>潜在弊端和反对意见</h2><p>从以上场景来看 <code>rebase</code> 功能非常强大，但我们也需要意识到它不是万能的，甚至对新手来说有些危险，稍有不慎就会发现 <code>git log</code> 里的提交不见了，或者卡在 <code>rebase</code> 的某个步骤不知道如何恢复。</p><p>我们上面已经提到了 <code>rebase</code> 有保持整洁的线性提交历史的优点，但也需要意识到它有以下潜在的弊端：</p><ul><li>如果涉及到已经推送过的提交，需要强制推送才能将本地 <code>rebase</code> 后的提交推送到远程。因此绝对不要在一个公共分支（也就是说还有其他人基于这个分支进行开发）执行 <code>rebase</code>，否则其他人之后执行 <code>git pull</code> 会合并出一条令人困惑的本地提交历史，进一步推送回远程分支后又会将远程的提交历史打乱（详见 <a href="https://www.daolf.com/posts/git-series-part-2/">Rebase and the golden rule explained</a>），较严重的情况下可能会对你的人身安全带来风险。</li><li>对新手不友好，新手很有可能在交互模式中误操作「丢失」某些提交（但其实是能够找回的）。</li><li>假如你频繁的使用 <code>rebase</code> 来集成主分支的更新，一个潜在的后果是你会遇到越来越多需要合并的冲突。尽管你可以在 <code>rebase</code> 过程中处理这些冲突，但这并非长久之计，更推荐的做法是频繁的合入主分支然后创建新的功能分支，而不是使用一个长时间存在的功能分支。</li></ul><p>另外有一些观点是我们应该尽量避免重写提交历史：</p><blockquote><p>有一种观点认为，仓库的提交历史即是 记录实际发生过什么。 它是针对历史的文档，本身就有价值，不能乱改。 从这个角度看来，改变提交历史是一种亵渎，你使用 谎言 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。</p></blockquote><p>以及频繁的使用 <code>rebase</code> 可能会使从历史提交中定位 bug 变得更加困难，详见 <a href="https://medium.com/@fredrikmorken/why-you-should-stop-using-git-rebase-5552bee4fed1">Why you should stop using Git rebase</a>。</p><h2 id="找回丢失的提交"><a href="#找回丢失的提交" class="headerlink" title="找回丢失的提交"></a>找回丢失的提交</h2><p>在交互式模式下进行 <code>rebase</code> 并对提交执行 <code>squash</code> 或 <code>drop</code> 等命令后，会从分支的 <code>git log</code> 中直接删除提交。如果你不小心操作失误，会以为这些提交已经永久消失了而吓出一身冷汗。</p><p>但这些提交并没有真正地被删除，如上所说，Git 并不会修改（或删除）原来的提交，而是重新创建了一批新的提交，并将当前分支顶端指向了新提交。因此我们可以使用 <code>git reflog</code> 找到并且重新指向原来的提交来恢复它们，这会撤销整个 <code>rebase</code>。感谢 Git ，即使你执行 <code>rebase</code> 或者 <code>commit --amend</code> 等重写提交历史的操作，它也不会真正地丢失任何提交。</p><h3 id="git-reflog-命令"><a href="#git-reflog-命令" class="headerlink" title="git reflog 命令"></a><code>git reflog</code> 命令</h3><p>reflogs 是 Git 用来记录本地仓库分支顶端的更新的一种机制，它会记录所有分支顶端曾经指向过的提交，因此 reflogs 允许我们找到并切换到一个当前没有被任何分支或标签引用的提交。</p><p>每当分支顶端由于任何原因被更新（通过切换分支、拉取新的变更、重写历史或者添加新的提交），一条新的记录将被添加到 reflogs 中。如此一来，我们在本地所创建过的每一次提交都一定会被记录在 reflogs 中。即使在重写了提交历史之后， reflogs 也会包含关于分支的旧状态的信息，并允许我们在需要时恢复到该状态。</p><p>注意 reflogs 并不会永久保存，它有 90 天的过期时间。</p><h3 id="还原提交历史"><a href="#还原提交历史" class="headerlink" title="还原提交历史"></a>还原提交历史</h3><p>我们从上一个例子继续，假设我们想恢复 <code>feature</code> 分支在 <code>rebase</code> 之前的 A→B→C→D→E→F 提交历史，但这时候的 <code>git log</code> 中已经没有后面 5 个提交，所以需要从 reflogs 中寻找，运行 <code>git reflog</code> 结果如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">64710dc (HEAD -&gt; feature) HEAD@&#123;0&#125;: rebase (<span class="built_in">continue</span>) (finish): returning to refs/heads/feature</span><br><span class="line">64710dc (HEAD -&gt; feature) HEAD@&#123;1&#125;: rebase (<span class="built_in">continue</span>): commit H</span><br><span class="line">8ab4506 HEAD@&#123;2&#125;: rebase (<span class="built_in">continue</span>): commit G</span><br><span class="line">1e186f8 HEAD@&#123;3&#125;: rebase (squash): commit C</span><br><span class="line">c50221f HEAD@&#123;4&#125;: rebase (start): checkout ef1372522cdad136ce7e6dc3e02aab4d6ad73f79</span><br><span class="line">74199ce HEAD@&#123;5&#125;: checkout: moving from master to feature</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><code>reflogs</code> 完整的记录了我们切换分支并进行 <code>rebase</code> 的全过程，继续向下检索，我们找到了从 <code>git log</code> 中消失的提交 F:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">74199ce HEAD@&#123;15&#125;: commit: commit F</span><br></pre></td></tr></table></figure><p>接下来我们通过 <code>git reset</code> 将 <code>feature</code> 分支的顶端重新指向原来的提交 F：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们想将工作区中的文件也一并还原，因此使用了--hard选项   </span></span><br><span class="line">$ git reset --hard 74199ce                                      </span><br><span class="line">HEAD 现在位于 74199ce commit F</span><br></pre></td></tr></table></figure><p>再运行 <code>git log</code> 会发现一切又回到了从前：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">74199cebdd34d107bb67b6da5533a2e405f4c330 (HEAD -&gt; feature) commit F</span><br><span class="line">e7c7111d807c1d5209b97a9c75b09da5cd2810d4 commit E</span><br><span class="line">d9623b0ef9d722b4a83d58a334e1ce85545ea524 commit D</span><br><span class="line">73deeedaa944ef459b17d42601677c2fcc4c4703 commit C</span><br><span class="line">c50221f93a39f3474ac59228d69732402556c93b commit B</span><br><span class="line">ef1372522cdad136ce7e6dc3e02aab4d6ad73f79 commit A</span><br></pre></td></tr></table></figure><blockquote><p><strong>参考链接</strong><br><a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"><em>git rebase - Atlassian Git Tutorial</em></a><br><a href="https://www.atlassian.com/git/tutorials/rewriting-history"><em>git amend - Atlassian Git Tutorial</em></a><br><a href="https://www.atlassian.com/git/tutorials/syncing/git-pull"><em>Git Pull - Atlassian Git Tutorial</em></a><br><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA"><em>Git - 变基</em></a><br><a href="https://git-scm.com/docs/git-rebase"><em>Git - git-rebase Documentation</em></a><br><a href="https://git-scm.com/docs/git-reflog"><em>Git - git-reflog Documentation</em></a><br><a href="https://medium.com/@fredrikmorken/why-you-should-stop-using-git-rebase-5552bee4fed1"><em>Why you should stop using Git rebase</em></a><br><a href="https://medium.com/@fabisiakradoslaw/understand-how-does-git-rebase-work-and-compare-with-git-merge-and-git-interactive-rebase-cce2c9775e43"><em>Understand how does git rebase work and compare with git merge and git interactive rebase</em></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+jsDelivr+PicGo搭建免费图床</title>
      <link href="/posts/d97654d1/"/>
      <url>/posts/d97654d1/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为嫌麻烦且不想花钱🥱，所以选择使用 <em><strong>GitHub + jsDelivr + PicGo</strong></em> 搭建图床……</p><p>下面是步骤，很简单🎈</p><h3 id="新建-Github-仓库"><a href="#新建-Github-仓库" class="headerlink" title="新建 Github 仓库"></a>新建 Github 仓库</h3><p>打开 <a href="https://github.com/">https://github.com</a>，登录后新建仓库用于存放图片</p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202302011554079.png" alt="新建github仓库" /><p>仓库创建好之后，打开 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a>，生成一个token用于PicGo操作你的仓库</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202302011554081.png" alt="生成token"></p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202302011554082.png" alt="生成token"></p><p>然后点击页面最底部的绿色 <span style="display: inline-block; padding: 0 16px; background: #2da44e; border-radius: 6px; color: white;">Generate token</span> 按钮，就能看到生成的token了。</p><p><strong><span style="color: red;">注意：这个token只显示一次！把这个token复制一下，等下要用。</span></strong></p><h3 id="配置-PicGo"><a href="#配置-PicGo" class="headerlink" title="配置 PicGo"></a>配置 PicGo</h3><p>PicGo下载地址: <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>下载安装后打开进行配置; </p><ul><li><p>点击<code>图床设置 -&gt; Github</code></p></li><li><p>仓库名格式为 <code>github用户名/仓库名</code></p></li><li><p>分支一般选择主分支即可</p></li><li><p>粘贴刚刚生成的 token</p></li><li><p>设定自定义域名, 因为GitHub国内访问受限, 所以需要使用 jsDelivr 加速访问, </p><p>自定义域名设置为: <code>https://cdn.jsdelivr.net/gh/github用户名/仓库名</code></p></li></ul><p>我的GitHub用户名是 zxyongyo, 存放图片的仓库名是 pictures, 图片存放在仓库的 blog 文件夹下, 配置就是下面这样, 可以参考一下:</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202302011631119.png" alt="配置PicGo"></p><blockquote><p>🔗 <strong>链接</strong><br><a href="https://picgo.github.io/PicGo-Doc/">PicGo 官网 - <em>https://picgo.github.io/PicGo-Doc</em></a><br><a href="https://www.jsdelivr.com/">jsDelivr 官网 - <em>https://www.jsdelivr.com</em></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-grid 网格布局</title>
      <link href="/posts/69e2d9c7/"/>
      <url>/posts/69e2d9c7/</url>
      
        <content type="html"><![CDATA[<h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><ul><li><code>display: grid</code> - 指定一个容器使用网格布局</li></ul><br><ul><li><code>grid-template-columns</code> - 指定每一列的列宽</li><li><code>grid-template-rows</code> - 指定每一行的行高</li><li><code>grid-template</code> - 以上两个属性的简写   </li></ul><br><ul><li><p><code>row-gap</code> - 设置行与行的间隔（行间距）</p></li><li><p><code>column-gap</code> - 设置列与列的间隔（列间距）</p></li><li><p><code>gap</code> - 以上两个属性的简写形式  <code>gap: &lt;row-gap&gt; &lt;column-gap&gt;</code></p></li></ul><br><ul><li><p><code>grid-template-areas</code> - 定义区域</p></li><li><p><code>grid-auto-flow</code> - 项目放置顺序；默认值是 <code>row</code> 表示先行后列， <code>column</code>表示先列后行</p></li></ul><br><ul><li><p><code>justify-items</code> - 单元格内容的水平位置</p></li><li><p><code>align-items</code> - 单元格内容的垂直位置</p></li><li><p><code>place-items</code> - 以上两个属性的简写形式  <code>place-items: &lt;align-items&gt; &lt;justify-items&gt;</code></p></li></ul><br><ul><li><p><code>justify-content</code> - 整个内容区域在容器中的水平位置</p></li><li><p><code>align-centent</code> - 整个内容区域在容器中的垂直位置</p></li><li><p><code>place-centent</code> - 以上两个属性的简写形式 <code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code></p></li><li><p><code>grid-auto-columns</code> - 设置浏览器自动创建的多余网格的列宽</p></li><li><p><code>grid-auto-rows</code> - 设置浏览器自动创建的多余网格的行高</p></li></ul><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><ul><li><p><code>grid-column-start</code> - 左边网格线所在的垂直网格线</p></li><li><p><code>grid-column-end</code> - 右边网格线所在的垂直网格线</p></li><li><p><code>grid-column</code> - 以上两个属性的简写形式 <code>grid-column: &lt;start-line&gt; / &lt;end-line&gt;</code></p></li></ul><br><ul><li><p><code>grid-row-start</code> - 上边网格线所在的水平网格线</p></li><li><p><code>grid-row-end</code> - 下边网格线所在的水平网格线</p></li><li><p><code>grid-row</code> - 以上两个属性的简写形式 <code>grid-row: &lt;start-line&gt; / &lt;end-line&gt;</code></p></li></ul><br><ul><li><p><code>grid-area</code> - 指定项目放在哪一个区域，</p><p>也能用作简写形式 <code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code></p></li></ul><br><ul><li><p><code>justify-self</code> - 设置单元格内容的水平位置</p></li><li><p><code>align-self</code> - 设置单元格内容的垂直位置</p></li><li><p><code>place-self</code> - 前面两个属性的简写形式  <code>place-self: &lt;align-self&gt; &lt;justify-self&gt;</code></p></li></ul><h3 id="函数与关键字"><a href="#函数与关键字" class="headerlink" title="函数与关键字"></a>函数与关键字</h3><ul><li><p><code>repeat()</code> - 用于简化重复值，该函数可以用于 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span> <span class="number">50px</span> <span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>auto-fill</code> - 自动填充至每行最大可容纳的单元格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>fr</code> - grid 容器中的可变长度单位，按比例分配剩余空间，在<code>grid-template-columns</code>、<code>grid-template-rows</code>及相关属性中使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">150px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>minmax()</code> - 定义一个长度闭区间，接受两个参数，分别为最小值和最大值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">1</span>fr);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程 - 阮一峰</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习使用笔记</title>
      <link href="/posts/4bae23a1/"/>
      <url>/posts/4bae23a1/</url>
      
        <content type="html"><![CDATA[<p><strong>本文记录我学习和使用  <code>git</code> 的笔记，记录学习和使用 <code>git</code> 时遇到的问题和技巧。(持续更新…)</strong></p><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ul><li><p>拉取远程指定分支 <code>$ git clone -b branch_name git@github.com:xxx</code></p></li><li><p>查看所有分支 <code>$ git branch -a</code></p></li><li><p>切换到指定的远程分支 <code>$ git switch -c branch_name origin/branch-name</code></p></li><li><p>删除远程指定分支 <code>$ git push origin -d [branch_name]</code></p></li></ul><h3 id="git-stash-储藏当前工作区"><a href="#git-stash-储藏当前工作区" class="headerlink" title="git-stash 储藏当前工作区"></a>git-stash 储藏当前工作区</h3><ul><li><code>git stash</code>命令用于将当前未提交（工作区和暂存区）的改动储藏起来，等处理完其它工作之后再恢复。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前工作区</span></span><br><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   app.js</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"><span class="comment"># 储藏当前工作区</span></span><br><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: e146062 edit app.js</span><br><span class="line"><span class="comment"># 查看 stash 记录</span></span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: e146062 edit app.js</span><br><span class="line"><span class="comment"># 此时可以切换分支或进行其他工作</span></span><br><span class="line"><span class="comment"># 恢复最近一次的 stash， 并删除本次 stash 记录</span></span><br><span class="line">$ git stash pop</span><br><span class="line">On branch dev</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   app.js</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (771daab2d3e6c5adcff439e7856e89891b35b5f3)</span><br></pre></td></tr></table></figure><ul><li>可以多次<code>stash</code>，恢复的时候使用<code>git stash list</code>查看 stash 记录，然后恢复指定的 stash</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看储藏记录</span></span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: e146062 edit app.js</span><br><span class="line">stash@&#123;1&#125;: WIP on dev: e146062 edit app.js</span><br><span class="line"><span class="comment"># 恢复 stash@&#123;0&#125;</span></span><br><span class="line">$ git stash apply stash@&#123;0&#125;</span><br><span class="line">On branch dev</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"><span class="comment"># 删除 stash@&#123;0&#125; 这条记录</span></span><br><span class="line">$ git stash drop stash@&#123;0&#125;</span><br><span class="line">Dropped stash@&#123;0&#125; (72bddc948a1fa80b9e84a072a6ab1f412c9f3b22)</span><br><span class="line"><span class="comment"># 以上两条命令等同于 git stash pop stash@&#123;0&#125;</span></span><br></pre></td></tr></table></figure><ul><li>可以看到以上两个储藏记录的标识信息完全一样，容易分不清每次储藏的什么内容，在使用 stash 时可以用<code>-m|--message</code>标识本次 stash</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -m <span class="string">&quot;stash message&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>git stash</code>默认不会储藏未跟踪（untracked）的文件，可以使用<code>-u|--include-untracked</code>储藏包括未跟踪的文件；或者使用<code>-a|--all</code>储藏包括未跟踪和忽略（.gitignore中指定）的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git stash -um &quot;add index.js&quot; 包括未跟踪的文件</span></span><br><span class="line">$ git stash --include-untracked --message <span class="string">&quot;add index.js&quot;</span></span><br><span class="line">Saved working directory and index state On dev: add index.js</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># git stash -am &quot;add index.js&quot; 包括未跟踪和忽略的文件</span></span><br><span class="line">$ git stash --all --message <span class="string">&quot;add index.js&quot;</span></span><br><span class="line">Saved working directory and index state On dev: add index.js</span><br></pre></td></tr></table></figure><h3 id="git-rebase-变基"><a href="#git-rebase-变基" class="headerlink" title="git rebase 变基"></a>git rebase 变基</h3><p>👉 <a href="../dfe0e190">git rebase 用法详解与工作原理</a></p><h3 id="合并多个commit"><a href="#合并多个commit" class="headerlink" title="合并多个commit"></a>合并多个commit</h3><ul><li><code>git rebase</code> 命令用来在另一个分支基础之上重新应用提交，用于把一个分支的修改合并到当前分支。</li><li>也可以利用这个命令来合并多个某个分支的多条 commit。</li></ul><p>例如我的 git 历史提交中有这样的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">a9753cc (HEAD -&gt; master) edit app.js</span><br><span class="line">eb6604c edit app.js</span><br><span class="line">8239289 edit app.js</span><br><span class="line">2bb4ff1 create app.js</span><br><span class="line">c81bd04 edit README.md</span><br><span class="line">0a38a95 edit README.md</span><br><span class="line">e87226d edit README.md</span><br><span class="line">c30085a create README.md</span><br></pre></td></tr></table></figure><p>可以看到有很多 commit 的信息都是重复的。</p><p>这时就可以使用以下命令重新编辑以往7次的 commit 历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从HEAD版本开始往过去数7个版本(包含HEAD版本)</span></span><br><span class="line">$ git rebase -i HEAD~7</span><br><span class="line"><span class="comment"># 指定版本号前的所有版本(不包含此版本)</span></span><br><span class="line">$ git rebase -i c30085a</span><br></pre></td></tr></table></figure><blockquote><p><code>-i（--interactive）</code>：弹出交互式的界面进行编辑合并</p></blockquote><p>输入命令，按下回车后会弹出 vim，让你编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~7</span><br><span class="line">pick e87226d edit README.md</span><br><span class="line">pick 0a38a95 edit README.md</span><br><span class="line">pick c81bd04 edit README.md</span><br><span class="line">pick 2bb4ff1 create app.js</span><br><span class="line">pick 8239289 edit app.js</span><br><span class="line">pick eb6604c edit app.js</span><br><span class="line">pick a9753cc edit app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase c30085a..a9753cc onto c30085a (7 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick &lt;commit&gt; = 正常选中</span></span><br><span class="line"><span class="comment"># r, reword &lt;commit&gt; = 选中，并且修改提交信息</span></span><br><span class="line"><span class="comment"># e, edit &lt;commit&gt; = 选中，rebase时会暂停，允许你修改这个commit</span></span><br><span class="line"><span class="comment"># s, squash &lt;commit&gt; = 选中，会将当前commit与上一个commit合并，保留所有commit信息</span></span><br><span class="line"><span class="comment"># f, fixup [-C | -c] &lt;commit&gt; = 与squash相同，但不会保存当前commit的提交信息, </span></span><br><span class="line"><span class="comment">#                    unless -C is used, in which case</span></span><br><span class="line"><span class="comment">#                    keep only this commit&#x27;s message; -c is same as -C but</span></span><br><span class="line"><span class="comment">#                    opens the editor</span></span><br><span class="line"><span class="comment"># x, exec &lt;command&gt; = 执行其他shell命令</span></span><br><span class="line"><span class="comment"># b, break = 停在这里，可以使用&#x27;git rebase --continue&#x27;继续rebase</span></span><br><span class="line"><span class="comment"># d, drop &lt;commit&gt; = 删除这个commit，这次提交的所有更改也会丢弃</span></span><br><span class="line"><span class="comment"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br></pre></td></tr></table></figure><p>编辑如下，然后 <code>:wq</code> 保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把 c81bd04 和 0a38a95 合并到 e87226d,不保留 0a38a95 和 c81bd04 的 commit message</span></span><br><span class="line">pick e87226d edit README.md</span><br><span class="line">f 0a38a95 edit README.md</span><br><span class="line">f c81bd04 edit README.md</span><br><span class="line">pick 2bb4ff1 create app.js</span><br><span class="line"><span class="comment"># 把 a9753cc 和 eb6604c 合并到 8239289,保留所有 commit message</span></span><br><span class="line">pick 8239289 edit app.js</span><br><span class="line">s eb6604c edit app.js</span><br><span class="line">s a9753cc edit app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>然后又会弹出一个 vim 让编辑 commit message，编辑如下，然后 <code>:wq</code> 保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 3 commits.</span></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line">edit app.js</span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line">add main fn</span><br><span class="line"><span class="comment"># This is the commit message #3:</span></span><br><span class="line">update server port</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>这时再查看合并后的 log，一下就简洁了好多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">714f406 (HEAD -&gt; master) edit app.js</span><br><span class="line">e17c8ac create app.js</span><br><span class="line">949598c edit README.md</span><br><span class="line">c30085a create README.md</span><br></pre></td></tr></table></figure><p><strong>解决冲突</strong></p><ul><li>在 <code>git rebase</code> 时可能会发生冲突，这时就需要先去解决冲突。</li><li>解决完冲突后再 <code>git add .</code>，然后继续 rebase <code>git rebase --continue</code></li><li>如果被合并的 commit，合并前已经推送到了远程库，可能无法正常推送到远程库，可以使用 <code>--force</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是多人协作开发不建议使用</span></span><br><span class="line">$ git push --force origin master</span><br></pre></td></tr></table></figure><hr><h3 id="修改-commit-的信息"><a href="#修改-commit-的信息" class="headerlink" title="修改 commit 的信息"></a>修改 commit 的信息</h3><p><strong>修改上一次提交的 commit 信息：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend --message=<span class="string">&quot;commit message&quot;</span></span><br></pre></td></tr></table></figure><p><strong>修改历史提交的 commit 信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">a2cf832 (HEAD -&gt; master) edit app.js</span><br><span class="line">8e5130d insert one line from app.js</span><br><span class="line">4968028 delete one line from app.js</span><br><span class="line">e17c8ac create app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 8e5130d 和 4968028 的 commit message</span></span><br><span class="line">$ git rebase -i HEAD~3 <span class="comment"># 或者 git rebase -i e17c8ac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把要修改的 commit 前的 pick 改为 r 或 reword</span></span><br><span class="line">r 4968028 delete one line from app.js</span><br><span class="line">r 8e5130d insert one line from app.js</span><br><span class="line">pick a2cf832 edit app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># :wq 保存并退出，然后依次修改 commit message，:wq 保存并退出</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">e146062 (HEAD -&gt; master) edit app.js</span><br><span class="line">c1fe1bf 从 app.js 中新增一行</span><br><span class="line">91ea1e8 从 app.js 中删除一行</span><br><span class="line">e17c8ac create app.js</span><br><span class="line"><span class="comment"># 就修改成功了</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts实用类型</title>
      <link href="/posts/ded4ef6d/"/>
      <url>/posts/ded4ef6d/</url>
      
        <content type="html"><![CDATA[<p><strong>TypeSciprt 提供了几种实用类型，方便常见的类型转换。这些类型在全局可用。</strong></p><blockquote><p>原文链接：<a href="https://www.typescriptlang.org/docs/handbook/utility-types.html"><em>https://www.typescriptlang.org/docs/handbook/utility-types.html</em></a></p></blockquote><h3 id="Awaited-lt-Type-gt"><a href="#Awaited-lt-Type-gt" class="headerlink" title="Awaited&lt;Type&gt;"></a>Awaited&lt;Type&gt;</h3><p>模拟 <code>async function</code> 中的 <code>await</code> 或 <code>Promises</code> 的 <code>.then()</code> 方法等操作，确切来说，就是递归展开<code>Promises </code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="title class_">Awaited</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;&gt; <span class="comment">// type A = string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">Awaited</span>&lt;<span class="title class_">Promise</span>&lt;<span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;&gt;&gt;  <span class="comment">// type B = number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C = <span class="title class_">Awaited</span>&lt;<span class="built_in">boolean</span> | <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;&gt; <span class="comment">// type C = boolean | number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> D = <span class="title class_">Awaited</span>&lt;<span class="keyword">typeof</span> fn1&gt; <span class="comment">// type D = string</span></span><br></pre></td></tr></table></figure><h3 id="Partial-lt-Type-gt"><a href="#Partial-lt-Type-gt" class="headerlink" title="Partial&lt;Type&gt;"></a>Partial&lt;Type&gt;</h3><p>构造一个将给定类型<code>Type</code>的所有属性设置为可选的类型，该实用类型返回给定类型的所有子集的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateTodo</span>(<span class="params">todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...todo, ...fieldsToUpdate &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todo1 = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;organize desk&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;clear clutter&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todo2 = <span class="title function_">updateTodo</span>(todo1, &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;throw out trash&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Required-lt-Type-gt"><a href="#Required-lt-Type-gt" class="headerlink" title="Required&lt;Type&gt;"></a>Required&lt;Type&gt;</h3><p>构造一个将给定类型<code>Type</code>的所有属性设置为必需的类型，和<code>Partial</code>相反。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  a?: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj2</span>: <span class="title class_">Required</span>&lt;<span class="title class_">Props</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br><span class="line"><span class="comment">// Property &#x27;b&#x27; is missing in type &#x27;&#123; a: number; &#125;&#x27; but required in type &#x27;Required&lt;Props&gt;&#x27;.</span></span><br></pre></td></tr></table></figure><h3 id="Readonly-lt-Type-gt"><a href="#Readonly-lt-Type-gt" class="headerlink" title="Readonly&lt;Type&gt;"></a>Readonly&lt;Type&gt;</h3><p>构造一个将给定类型<code>Type</code>的所有属性设置为只读的类型。将不能重新给所构造类型的属性分配值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Delete inactive users&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">todo.<span class="property">title</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="comment">// Cannot assign to &#x27;title&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><h3 id="Record-lt-Keys-Type-gt"><a href="#Record-lt-Keys-Type-gt" class="headerlink" title="Record&lt;Keys, Type&gt;"></a>Record&lt;Keys, Type&gt;</h3><p>构造一个对象类型，其键的属性为<code>Keys</code>，值的属性为<code>Type</code>。这个工具类型可以用于将一个类型的属性映射到另一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CatInfo</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CatName</span> = <span class="string">&quot;miffy&quot;</span> | <span class="string">&quot;boris&quot;</span> | <span class="string">&quot;mordred&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">cats</span>: <span class="title class_">Record</span>&lt;<span class="title class_">CatName</span>, <span class="title class_">CatInfo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">miffy</span>: &#123; <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">breed</span>: <span class="string">&quot;Persian&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">boris</span>: &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">breed</span>: <span class="string">&quot;Maine Coon&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">mordred</span>: &#123; <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">breed</span>: <span class="string">&quot;British Shorthair&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Pick-lt-Type-Keys-gt"><a href="#Pick-lt-Type-Keys-gt" class="headerlink" title="Pick&lt;Type, Keys&gt;"></a>Pick&lt;Type, Keys&gt;</h3><p>通过从给定的类型<code>Type</code>中选择一组属性<code>Keys</code>（字符串字面量或字符串字面量的联合）构建一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Omit-lt-Type-Keys-gt"><a href="#Omit-lt-Type-Keys-gt" class="headerlink" title="Omit&lt;Type, Keys&gt;"></a>Omit&lt;Type, Keys&gt;</h3><p>通过从给定类型<code>Tpye</code>中移除<code>Keys</code>（字符串字面量或字符串字面量的联合）构造一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;description&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Clean room&#x27;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="number">1615544252770</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoInfo</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;completed&#x27;</span> | <span class="string">&#x27;createdAt&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todoInfo</span>: <span class="title class_">TodoInfo</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Pick up kids&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Kindergarten closes at 5pm&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exclude-lt-UnionType-ExcludedMembers-gt"><a href="#Exclude-lt-UnionType-ExcludedMembers-gt" class="headerlink" title="Exclude&lt;UnionType, ExcludedMembers&gt;"></a>Exclude&lt;UnionType, ExcludedMembers&gt;</h3><p>通过从<code>UnionType</code>中排除可分配给<code>ExcludedMembers</code>的所有联合成员构造一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type T0 = &#x27;b&#x27; | &#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = &#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Exclude</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="Extract-lt-Type-Union-gt"><a href="#Extract-lt-Type-Union-gt" class="headerlink" title="Extract&lt;Type, Union&gt;"></a>Extract&lt;Type, Union&gt;</h3><p>通过从给定类型<code>Type</code>中提取可分配给<code>Union</code>的所有联合成员来构造一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type T0 = &quot;a&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Extract</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;f&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = () =&gt; void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Extract</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="NonNullable-lt-Type-gt"><a href="#NonNullable-lt-Type-gt" class="headerlink" title="NonNullable&lt;Type&gt;"></a>NonNullable&lt;Type&gt;</h3><p>通过从给定类型<code>Type</code>中排除<code>null</code>和undefined`来构造一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type T0 = string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = string[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span>[] | <span class="literal">null</span> | <span class="literal">undefined</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="Parameters-lt-Type-gt"><a href="#Parameters-lt-Type-gt" class="headerlink" title="Parameters&lt;Type&gt;"></a>Parameters&lt;Type&gt;</h3><p>从给定的函数类型<code>Type</code>的形参中使用的类型构造一个元组类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">arg: &#123; a: <span class="built_in">number</span>; b: <span class="built_in">string</span> &#125;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T0 = []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Parameters</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = [s: string]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Parameters</span>&lt;<span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = [arg: unknown]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Parameters</span>&lt;&lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T3 = [arg: &#123; a: number; b: string &#125;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">Parameters</span>&lt;<span class="keyword">typeof</span> f1&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T4 = unknown[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T5 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; provides no match for the signature &#x27;(...args: any): any&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T7</span> = <span class="title class_">Parameters</span>&lt;<span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="ConstructorParameters-lt-Type-gt"><a href="#ConstructorParameters-lt-Type-gt" class="headerlink" title="ConstructorParameters&lt;Type&gt;"></a>ConstructorParameters&lt;Type&gt;</h3><p>用给定的构造函数的类型<code>Type</code>构造元组或数组。生成一个具有所有形参类型的元组类型（如果<code>Type</code>不是函数，该类型为<code>never</code>）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type T0 = [message?: string | undefined, options?: ErrorOptions | undefined]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">ErrorConstructor</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = string[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">FunctionConstructor</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = [pattern: string | RegExp, flags?: string | undefined]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">RegExpConstructor</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T3 = unknown[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; does not satisfy the constraint &#x27;abstract new (...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; provides no match for the signature &#x27;new (...args: any): any&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">Function</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="ReturnType-lt-Type-gt"><a href="#ReturnType-lt-Type-gt" class="headerlink" title="ReturnType&lt;Type&gt;"></a>ReturnType&lt;Type&gt;</h3><p>构造一个由给定函数类型<code>Type</code>的返回类型组成的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f1</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T0 = string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = unknown</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ReturnType</span>&lt;&lt;T&gt;<span class="function">() =&gt;</span> T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T3 = number[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">ReturnType</span>&lt;&lt;T <span class="keyword">extends</span> U, U <span class="keyword">extends</span> <span class="built_in">number</span>[]&gt;<span class="function">() =&gt;</span> T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T4 = &#123; a: number; b: string; &#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> f1&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T5 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T6 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T7</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Type &#x27;Function&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">Type &#x27;Function&#x27; provides no match for the signature &#x27;(...args: any): any&#x27;. */</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T8</span> = <span class="title class_">ReturnType</span>&lt;<span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="InstanceType-lt-Type-gt"><a href="#InstanceType-lt-Type-gt" class="headerlink" title="InstanceType&lt;Type&gt;"></a>InstanceType&lt;Type&gt;</h3><p>构造一个类型，由<code>Type</code>中构造函数实力类型组成。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  x = <span class="number">0</span></span><br><span class="line">  y = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T0 = C</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> C&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; does not satisfy the constraint &#x27;abstract new (...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Type &#x27;Function&#x27; does not satisfy the constraint &#x27;abstract new (...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">  Type &#x27;Function&#x27; provides no match for the signature &#x27;new (...args: any): any&#x27;. */</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">InstanceType</span>&lt;<span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="ThisParameterType-lt-Type-gt"><a href="#ThisParameterType-lt-Type-gt" class="headerlink" title="ThisParameterType&lt;Type&gt;"></a>ThisParameterType&lt;Type&gt;</h3><p>提取函数类型<code>Type</code>的<code>this形参</code>的类型，如果<code>Type</code>没有此形参，则为<code>unknown</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">numberToString</span>(<span class="params">n: ThisParameterType&lt;<span class="keyword">typeof</span> toHex&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> toHex.<span class="title function_">apply</span>(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OmitThisParameter-lt-Type-gt"><a href="#OmitThisParameter-lt-Type-gt" class="headerlink" title="OmitThisParameter&lt;Type&gt;"></a>OmitThisParameter&lt;Type&gt;</h3><p>从函数类型<code>Type</code>中移除<code>this形参</code>。如果<code>Type</code>没有显式声明<code>this</code>形参，结果就是<code>Type</code>。否则，将依照<code>Type</code>创建一个不带此形参的新函数。泛型被删除，只有最后一个重载签名被传到新的函数类型中。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fiveToHex</span>: <span class="title class_">OmitThisParameter</span>&lt;<span class="keyword">typeof</span> toHex&gt; = toHex.<span class="title function_">bind</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fiveToHex</span>())</span><br></pre></td></tr></table></figure><h3 id="ThisType-lt-Type-gt"><a href="#ThisType-lt-Type-gt" class="headerlink" title="ThisType&lt;Type&gt;"></a>ThisType&lt;Type&gt;</h3><p>该实用类型不返回转换后的类型。它是上下文<code>this</code>类型的标记。要使用这个实用类型，必须启用<code>noImplicitThis</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ObjectDescriptor</span>&lt;D, M&gt; = &#123;</span><br><span class="line">  data?: D;</span><br><span class="line">  methods?: M &amp; <span class="title class_">ThisType</span>&lt;D &amp; M&gt;; <span class="comment">// Type of &#x27;this&#x27; in methods is D &amp; M</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> makeObject&lt;D, M&gt;(<span class="attr">desc</span>: <span class="title class_">ObjectDescriptor</span>&lt;D, M&gt;): D &amp; M &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">data</span>: <span class="built_in">object</span> = desc.<span class="property">data</span> || &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">methods</span>: <span class="built_in">object</span> = desc.<span class="property">methods</span> || &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...data, ...methods &#125; <span class="keyword">as</span> D &amp; M</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">makeObject</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">moveBy</span>(<span class="params">dx: <span class="built_in">number</span>, dy: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">x</span> += dx <span class="comment">// Strongly typed this</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> += dy <span class="comment">// Strongly typed this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj.<span class="property">x</span> = <span class="number">10</span></span><br><span class="line">obj.<span class="property">y</span> = <span class="number">20</span></span><br><span class="line">obj.<span class="title function_">moveBy</span>(<span class="number">5</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="Uppercase-lt-StringType-gt"><a href="#Uppercase-lt-StringType-gt" class="headerlink" title="Uppercase&lt;StringType&gt;"></a>Uppercase&lt;StringType&gt;</h3><p>将字符串中的每个字符串转换为大写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type ShoutyGreeting = &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ShoutyGreeting</span> = <span class="title class_">Uppercase</span>&lt;<span class="title class_">Greeting</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ASCIICacheKey</span>&lt;<span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="string">`ID-<span class="subst">$&#123;Uppercase&lt;Str&gt;&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type MainID = &quot;ID-MY_APP&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MainID</span> = <span class="title class_">ASCIICacheKey</span>&lt;<span class="string">&#x27;my_app&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>Lowercase&lt;StringType&gt;</p><p>将字符串中的每个字符串转换为小写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type ShoutyGreeting = &quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ShoutyGreeting</span> = <span class="title class_">Lowercase</span>&lt;<span class="title class_">Greeting</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ASCIICacheKey</span>&lt;<span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="string">`ID-<span class="subst">$&#123;Lowercase&lt;Str&gt;&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type MainID = &quot;ID-my_app&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MainID</span> = <span class="title class_">ASCIICacheKey</span>&lt;<span class="string">&#x27;my_app&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Capitalize-lt-StringType-gt"><a href="#Capitalize-lt-StringType-gt" class="headerlink" title="Capitalize&lt;StringType&gt;"></a>Capitalize&lt;StringType&gt;</h3><p>将字符串的第一个字符转为大写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LowercaseGreeting</span> = <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Greeting = &quot;Hello, world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="title class_">Capitalize</span>&lt;<span class="title class_">LowercaseGreeting</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="Uncapitalize-lt-StringType-gt"><a href="#Uncapitalize-lt-StringType-gt" class="headerlink" title="Uncapitalize&lt;StringType&gt;"></a>Uncapitalize&lt;StringType&gt;</h3><p>将字符串的第一个字符转为小写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UppercaseGreeting</span> = <span class="string">&quot;HELLO WORLD&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type UncomfortableGreeting = &quot;hELLO WORLD&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UncomfortableGreeting</span> = <span class="title class_">Uncapitalize</span>&lt;<span class="title class_">UppercaseGreeting</span>&gt;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css切角效果</title>
      <link href="/posts/1f5ea842/"/>
      <url>/posts/1f5ea842/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20220310163254.jpg" alt="箭头"></p><p>如上图👆这种，切掉一个矩形的一个或多个角的设计效果，前端在切图时会经常遇到这样的场景，如何使用css轻易实现这种效果？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>使用css的<strong>渐变</strong>就能实现这种效果。假设我们需要一个右下角被切掉的效果，我们只需要一个<strong>从右下角到左上角（-45deg）的线性渐变</strong>，从透明色开始渐变，然后在相同的位置设置另一个色值就能实现。（假设切角深度为35px）：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">35px</span>, <span class="number">#C02A79</span> <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20220310170839.jpg" alt="切角"></p><ul><li>现在，我们来把它变成一个向右箭头的样子，只需要再为它加一层渐变：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: </span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>, transparent <span class="number">35px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">35px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom;</span><br></pre></td></tr></table></figure><p>如果你运行了上面的代码你就会发现，结果是这个样子的😱。</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20220310171612.jpg"></p><ul><li>这是因为我们使用了两层渐变，默认情况下，两层渐变都会填满整个元素，会相互覆盖，而且两层渐变都会默认平铺整个元素，所以我们需要设置<code>background-size</code>让每层渐变只占据元素的一半，并关掉<code>background-repeat</code>：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: </span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>, transparent <span class="number">35px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">35px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20220310172416.jpg" alt="箭头"></p><ul><li>看到这里你应该也知道怎么做出4个切角的效果了：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: </span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top left,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top right,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom right,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom left;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20220310173032.jpg" alt="4个切角"></p><ul><li>虽然实现了我们想要的效果，但是上面的代码非常臃肿切难以维护，每当我们需要修改背景颜色或切角尺寸时，都需要修改4处，我们可以使用<strong>css预处理器</strong>减少代码的重复度。例如使用<strong>scss</strong>：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> beveled-corners(<span class="variable">$bg</span>, <span class="variable">$tl</span>:<span class="number">0</span>, <span class="variable">$tr</span>:<span class="variable">$tl</span>, <span class="variable">$br</span>:<span class="variable">$tl</span>, <span class="variable">$bl</span>:<span class="variable">$tr</span>) &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$bg</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">      <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, transparent <span class="variable">$tl</span>, <span class="variable">$bg</span> <span class="number">0</span>) top left,</span><br><span class="line">      <span class="built_in">linear-gradient</span>(<span class="number">225deg</span>, transparent <span class="variable">$tr</span>, <span class="variable">$bg</span> <span class="number">0</span>) top right,</span><br><span class="line">      <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="variable">$br</span>, <span class="variable">$bg</span> <span class="number">0</span>) bottom right,</span><br><span class="line">      <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="variable">$bl</span>, <span class="variable">$bg</span> <span class="number">0</span>) bottom left;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要的时候就可以直接调用它，传入2-5个参数：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@include</span> beveled-corners(<span class="number">#C02A79</span>, <span class="number">15px</span>); <span class="comment">// 4个15px的切角 </span></span><br><span class="line"><span class="keyword">@include</span> beveled-corners(<span class="number">#C02A79</span>, <span class="number">0</span>， <span class="number">15px</span>, <span class="number">15px</span>, <span class="number">0</span>); <span class="comment">// 只有左上和左下15px的切角 </span></span><br></pre></td></tr></table></figure><h2 id="弧形切角"><a href="#弧形切角" class="headerlink" title="弧形切角"></a>弧形切角</h2><ul><li>有了上面实现切角的经验，如果想要实现弧形切角的话也就很容易了。只需要把上面的线性渐变换成径向渐变即可：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at top left, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top left,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at top right, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top right,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at bottom right, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom right,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at bottom left, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom left;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20220311110911.jpg" alt="css弧形切角"></p><ul><li>以后再遇到类似这种的切角效果就不用麻烦UI小姐姐🤦切图啦。（下图完整代码看<a href="https://codepen.io/pen?template=WNdewEE">👉这里👈</a>）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20220311145050.jpg" alt="优惠券"></p><h2 id="另一种解决方案-clip-path"><a href="#另一种解决方案-clip-path" class="headerlink" title="另一种解决方案(clip-path)"></a>另一种解决方案(clip-path)</h2><ul><li>使用css的<code>clip-path</code>属性的<code>polygon</code>函数，也能够实现同样的效果，例如将一个元素切出4个20px的斜面切角：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: deepskyblue;</span><br><span class="line"><span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(</span><br><span class="line">    <span class="number">20px</span> <span class="number">0</span>, <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="number">0</span>, </span><br><span class="line">    <span class="number">100%</span> <span class="number">20px</span>, <span class="number">100%</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>), </span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="number">100%</span>, <span class="number">20px</span> <span class="number">100%</span>, </span><br><span class="line">    <span class="number">0</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>), <span class="number">0</span> <span class="number">20px</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20220311152912.jpg" alt="使用clip-path实现切角"></p><ul><li>这种方法的代码确实短了很多，但是它写起来却并不比使用渐变简单，而且不容易维护，假如我们要改动切角的尺寸，那需要改动八处！这种方法的好处是我们可以对任意类型的背景（比如图片）进行裁切。</li></ul><h2 id="附-线性渐变角度"><a href="#附-线性渐变角度" class="headerlink" title="附 - 线性渐变角度"></a>附 - 线性渐变角度</h2><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20220311162257.jpg" alt="线性渐变角度"></p><ul><li>如上图<code>0deg</code>代表渐变方向为<strong>从下到上</strong>，<code>45deg</code>代表从<strong>左下到右上</strong>,<code>90deg</code>代表<strong>从左向右</strong>，诸如此类正角度代表顺时针方向，负角度代表逆时针方向；当然你也可以使用另一种方法指定渐变的方向：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to top right, blue, pink);</span><br><span class="line">// 等同于</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, blue, pink);</span><br></pre></td></tr></table></figure><blockquote><p>内容来自<a href="https://book.douban.com/subject/26745943/"><em>《css揭秘》</em></a>一书；<br>对css渐变不熟悉的同学可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Images/Using_CSS_gradients"><em>MDN-css渐变</em></a>；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始使用git管理您的代码</title>
      <link href="/posts/524f855e/"/>
      <url>/posts/524f855e/</url>
      
        <content type="html"><![CDATA[<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul><li><p>git 安装地址： <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p></li><li><p>安装完成后，在桌面右键菜单找到“Git Bash”，点击蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20210507162251.png" alt="git"></p></li><li><p>确认安装成功后，还需要最后一步设置，在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p><em>说明：git config –list  命令可以查看当前Git环境所有配置</em></p></li></ul><h2 id="注册GitHub及创建远程仓库"><a href="#注册GitHub及创建远程仓库" class="headerlink" title="注册GitHub及创建远程仓库"></a>注册GitHub及创建远程仓库</h2><ul><li><p>注册GitHub： <a href="https://github.com/">https://github.com</a> </p><p>注册并登录成功之后，进到GitHub主页，在页面右上方用户菜单上选择 “+”-&gt;New repository 创建一个新的仓库。</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20210507162810.png" alt="创建仓库"></p><p>给仓库取一个名字，点击创建仓库按钮 你将成功创建一个仓库。</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20210507163033.png" alt="新建仓库"></p></li></ul><h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><ul><li>在你自己的电脑合适的地方创建一个目录，进到这个目录，打开 Git Bash 通过 <code>git init</code> 命令把这个目录变成Git可以管理的仓库。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202303111644173.png" alt="创建本地仓库"></p><h2 id="将本地仓库和远程库关联"><a href="#将本地仓库和远程库关联" class="headerlink" title="将本地仓库和远程库关联"></a>将本地仓库和远程库关联</h2><p>由于你 本地的Git仓库 和 Github仓库 之间的传输是通过 <a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH</a> 加密的，所以在关联远程库之前还需要一些设置。</p><ul><li><p>在 Git Bash 中输入以下命令来生成SSH 密钥（把邮箱替换为你的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>然后按照提示完成三次回车，如果创建成功，本地用户主目录下就会有一个 <code>.ssh</code> 文件夹，里面有 <code>id_ed25519</code> 和 <code>id_ed25519.pub</code> 两个文件。<code>id_ed25519</code> 是私钥，不能泄露出去，<code>id_ed25519.pub</code> 是公钥，可以放心地告诉任何人。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> ~/.ssh</span><br><span class="line">id_ed25519  id_ed25519.pub</span><br></pre></td></tr></table></figure><p>接下来把你的公钥，也就是 <code>id_ed25519.pub</code> 文件的内容复制到剪贴板，可以通过以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure><p><a href="https://github.com/settings/ssh/new">点击这里</a>把复制的公钥的内容添加到 Github：</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/202303111645089.png" alt="添加ssh key"></p></li><li><p>接下来就可以把 GitHub仓库 和 本地仓库 关联了</p><p>在本地仓库下打开 Git bash 输入以下命令（把仓库地址替换为你的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:zxyongyo/test.git</span><br></pre></td></tr></table></figure><p>你的仓库地址在这哦</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20210507164636.png" alt="关联远程仓库"></p><p>现在，你就可以把本地仓库的所有内容推送到远程库上了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Everything up-to-date</span><br><span class="line">Branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;master&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br></pre></td></tr></table></figure></li></ul><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><h3 id="克隆（clone）"><a href="#克隆（clone）" class="headerlink" title="克隆（clone）"></a>克隆（clone）</h3><p>在实际开发中,大多数时候，我们没有机会从头init仓库，而是远程仓库已经存在，我们要参与到项目中，这时只需要将远程仓库clone下来就好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> 仓库地址</span><br></pre></td></tr></table></figure><p>如果需要 clone 非默认分支，使用 <code>-b</code> 指定分支名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b dev 仓库地址</span><br></pre></td></tr></table></figure><h3 id="分支（branch）"><a href="#分支（branch）" class="headerlink" title="分支（branch）"></a>分支（branch）</h3><p>通常情况下, 我们自己在协助开发, 需要添加一个新功能的时候, 是不能在主分支上直接修改的, 需要我们自己再创建一个新的分支, 等新功能开发完成后再合并到主分支 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个debug分支</span></span><br><span class="line">$ git branch debug</span><br><span class="line"><span class="comment"># 切换到debug分支</span></span><br><span class="line">$ git switch debug</span><br><span class="line">Switched to branch <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># 以上两条命令可简写为 git switch -c debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支，当前已经在debug分支上面</span></span><br><span class="line">$ git branch</span><br><span class="line">* debug</span><br><span class="line">  master</span><br><span class="line"><span class="comment"># debug解决后，把修改合并到master，并删除debug分支</span></span><br><span class="line">$ git switch master</span><br><span class="line">$ git merge debug</span><br><span class="line">$ git branch -d debug</span><br></pre></td></tr></table></figure><h3 id="拉取别人的提交"><a href="#拉取别人的提交" class="headerlink" title="拉取别人的提交"></a>拉取别人的提交</h3><p>在我们完成了某项功能的修改，需要push到远程的时候，其他协作者可能已经提交了他们的修改，这时，我们需要先把最新的提交拉取下来，加入我们的修改，再重新提交上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line"><span class="comment"># push被驳回了，因为有其他人已经提交了更新</span></span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">&#x27;git@github.com:JavyZheng/git_demo.git&#x27;</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., <span class="string">&#x27;git pull ...&#x27;</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">&#x27;Note about fast-forwards&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;git push --help&#x27;</span> <span class="keyword">for</span> details </span><br><span class="line"><span class="comment"># 拉取远程提交内容并合并到当前工作区</span></span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment"># 重新push到远程</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>当拉取协作者的提交时，很可能不同开发者修改了同一个文件的同一部分，这时候，就会出现冲突，我们需要手动解决这些冲突，再重新提交上去。</p><p><strong>例如冲突代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="variable constant_">HEAD</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;This is master branch.&#x27;</span>);</span><br><span class="line">=======</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;This is developOne1 branch.&#x27;</span>);</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; developOne</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据需求我们手动将代码改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;This is master branch.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再提交就没有问题了。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底弄懂 js 中事件冒泡和捕获🎈</title>
      <link href="/posts/81781fa3/"/>
      <url>/posts/81781fa3/</url>
      
        <content type="html"><![CDATA[<h2 id="事件触发经历的三个阶段"><a href="#事件触发经历的三个阶段" class="headerlink" title="事件触发经历的三个阶段"></a>事件触发经历的三个阶段</h2><ol><li>首先我们要弄清楚当一个dom事件被触发时，它不仅仅是单纯地在自身对象上触发一次，而是经历了三个不同的阶段：👇</li></ol><ul><li><strong>捕获阶段</strong>：事件对象从 <code>window</code> 开始依次向下传递，直到目标的父级元素，从外向内捕获事件对象；</li><li><strong>目标阶段</strong>：到达目标事件位置，触发事件；</li><li><strong>冒泡阶段</strong>：从目标的父级开始依次向上传递，直到 <code>window</code> 停止，从内向外冒泡事件对象。</li></ul><ol start="2"><li>下面是 <a href="https://www.w3.org/TR/DOM-Level-3-Events/#event-flow" title="w3c事件流">w3c解释事件流</a> 的图：<br><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20210428110115.jpg" alt="事件流" title="事件流"></li></ol><h2 id="冒泡和捕获"><a href="#冒泡和捕获" class="headerlink" title="冒泡和捕获"></a>冒泡和捕获</h2><ol><li><p>当我们注册一个事件时，事件默认使用冒泡事件流，不使用捕获事件流。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(type, listener);</span><br><span class="line"><span class="title function_">addEventListener</span>(type, listener, useCapture);</span><br><span class="line"><span class="title function_">addEventListener</span>(type, listener, options);</span><br></pre></td></tr></table></figure><p><strong>event：</strong> <strong>必须</strong>。字符串，指定 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" title="事件参考|MDN">事件类型</a>。<br><strong>listener：</strong> <strong>必须</strong>。一个实现了 <code>EventListener</code> 接口的对象，或者是一个事件处理函数。<br><strong>useCapture：</strong>可选。布尔值，指定事件是否在捕获或冒泡阶段执行。<strong>（默认 <code>false</code>）</strong></p><p><strong>options：</strong> 可选，一个对象，可用属性如下👇</p><ul><li>capture：同 useCapture</li><li>once：布尔值，表示 <code>listener</code> 被添加后最多只调用一次。如果为 <code>true</code>，<code>listener</code> 会在其被调用之后自动移除。</li><li>passive：布尔值，为 <code>true</code> 时，表示 <code>listener</code> 永远不会调用 <code>preventDefault()</code>；详细请查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#%E4%BD%BF%E7%94%A8_passive_%E6%94%B9%E5%96%84%E6%BB%9A%E5%B1%8F%E6%80%A7%E8%83%BD">使用 passive 改善滚屏性能</a>。</li></ul></li><li><p>下面在代码中验证，直接附上全部代码。（可以粘到自己编辑器中运行、尝试一下）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>event<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#one</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#two</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#three</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: deepskyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>one</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>two</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;three&quot;</span>&gt;</span>three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> one = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;one&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> two = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;two&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> three = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;three&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    one.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one捕获&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    two.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two捕获&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    three.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three捕获&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    one.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one冒泡&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">    two.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two冒泡&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">    three.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three冒泡&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当我们点击three时，可以看到确实是先由外向内事件捕获，一直到事发元素，再由内向外冒泡到根节点上。<br><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20210428110353.png" alt="js事件" title="冒泡&amp;捕获"></p></li><li><p>如果一个元素既注册了冒泡事件，也注册了捕获事件，则按照注册顺序执行。<br>我们修改代码把冒泡事件放在捕获事件之前：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">one.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one冒泡&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line">two.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two冒泡&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line">three.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three冒泡&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line">   </span><br><span class="line">one.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one捕获&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">two.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two捕获&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">three.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three捕获&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>再点击three，可以看到这次three先是先冒泡后捕获的，由此可见一个元素同时注册了冒泡和捕获事件，则会按照注册顺序执行。</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20210428110502.png" alt="js事件" title="冒泡&amp;捕获"></p></li></ol><h2 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h2><ul><li><p>在很多时候我们并不需要元素绑定的事件向外冒泡，这时我们就要阻止事件的冒泡。<br>我们再次修改代码，阻止three的事件冒泡：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">three.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three冒泡&#x27;</span>)</span><br><span class="line">  <span class="comment">// 阻止冒泡</span></span><br><span class="line">  e.<span class="title function_">stopPropagation</span>()</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li><li><p>修改完代码后我们再次点击three，可以看到three的点击事件触发后就停止继续向外冒泡了；</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20210428110554.png" alt="js事件" title="冒泡&amp;捕获"></p></li></ul><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><ul><li><p>了解了JavaScript中事件的冒泡和捕获后，我就可以利用js的这种机制完成一些代码上的优化了。</p><p>例如现在有这样的一段代码👇</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要给一个有很多子元素的列表中的每一个<code>li</code>绑定一个事件，如果我们直接手动给每个<code>li</code>绑定事件，不仅非常的麻烦🤮，而且也会造成很大的资源浪费。</p><p>这个时候我们就可以利用<font color='red'>事件冒泡机制</font>将监听事件只绑定在父元素<code>ul</code>上面，当事件触发时再判断触发事件的目标元素，来完成我们的操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>)</span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> target = event.<span class="property">target</span></span><br><span class="line">  <span class="comment">// 判断是不是目标元素</span></span><br><span class="line">  <span class="keyword">if</span>(target.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">innerHTML</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样当<code>#list</code>下的<code>li</code>被点击后我们就可以获取到被点击的<code>li</code>完成我们的操作了🤗。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组和对象遍历方法</title>
      <link href="/posts/bee75f83/"/>
      <url>/posts/bee75f83/</url>
      
        <content type="html"><![CDATA[<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span> <span class="comment">// 跳出循环</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span> <span class="comment">// 跳过本次循环</span></span><br><span class="line">  &#125;</span><br><span class="line">  str += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// &quot;13579&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]) <span class="comment">// z, x, y, o, n, g</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="for-…-in"><a href="#for-…-in" class="headerlink" title="for … in"></a>for … in</h3><ul><li>以任意顺序迭代一个对象的除<code>Symbol</code>以外的可枚举属性，包括继承的可枚举属性。（<em>for … in是为遍历对象属性而构建的，不建议与数组一起使用</em>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj.&#x27;</span> + k + <span class="string">&#x27; = &#x27;</span> + k)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;obj.a = a&quot;  </span></span><br><span class="line"><span class="comment">// &quot;obj.b = b&quot;  </span></span><br><span class="line"><span class="comment">// &quot;obj.c = c&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="for-…-of"><a href="#for-…-of" class="headerlink" title="for … of"></a>for … of</h3><ul><li>在可迭代对象上创建一个迭代循环，调用自定义迭代钩子，为每个不同属性的值执行语句</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;a&quot;</span></span><br><span class="line"><span class="comment">// &quot;b&quot;</span></span><br><span class="line"><span class="comment">// &quot;c&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of#for...of%E4%B8%8Efor...in%E7%9A%84%E5%8C%BA%E5%88%AB"><code>for ... in</code> 与 <code>for ... of</code>的区别 ✨</a></strong></p></blockquote><hr><h3 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach()"></a>Array.prototype.forEach()</h3><ul><li>forEach 可以接收两个参数（回调函数, 回调函数中this的值），<strong>如果使用箭头函数，thisArg参数会被忽略</strong></li><li>callback可以接收三个参数 （当前元素，当前元素的索引，当前数组）</li><li>在forEach执行过程中，除抛出异常外，没有办法终止或跳出循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)  <span class="comment">// z, x, o, n, g</span></span><br><span class="line">  <span class="keyword">if</span> (value === <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">shift</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, arr)</span><br></pre></td></tr></table></figure><hr><h3 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h3><ul><li>map方法和forEach类似，接收一个回调函数作为参数，将数组所有成员一次传入函数，</li><li>然后把每次的执行结果组成一个新数组返回，<strong>如果不是为了使用返回值，就不要用map</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [122, 120, 121, 111, 110, 103]</span></span><br></pre></td></tr></table></figure><hr><h3 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h3><ul><li>filter方法用来过滤数组，返回满足条件成员组成的一个新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) &gt;= <span class="number">120</span></span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="comment">// const newArr = arr.filter(value =&gt; value.charCodeAt(0) &gt;= 120)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [&#x27;z&#x27;, &#x27;x&#x27;, &#x27;y&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h3 id="Array-prototype-some-amp-Array-prototype-every"><a href="#Array-prototype-some-amp-Array-prototype-every" class="headerlink" title="Array.prototype.some() &amp; Array.prototype.every()"></a>Array.prototype.some() &amp; Array.prototype.every()</h3><ul><li>some、every方法功能和用法都相似，返回一个布尔值，表示数组成员是否符合某种条件</li><li>some 当有一个数组成员符合条件就返回true；every 当全部数组成员符合条件才返回true，否则返回false</li><li><strong>对于空数组 some返回false，every返回true，回调函数都不会执行</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> someRes = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) &gt; <span class="number">120</span>  <span class="comment">// 只要有一个charcode大于120就返回true</span></span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="keyword">const</span> everyRes = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) &gt; <span class="number">120</span>  <span class="comment">// charcode大于120才返回true</span></span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someRes, everyRes) <span class="comment">// true, false</span></span><br></pre></td></tr></table></figure><hr><h3 id="Array-prototype-reduce-amp-Array-prototype-reduceRight"><a href="#Array-prototype-reduce-amp-Array-prototype-reduceRight" class="headerlink" title="Array.prototype.reduce() &amp; Array.prototype.reduceRight()"></a>Array.prototype.reduce() &amp; Array.prototype.reduceRight()</h3><ul><li><p>reduce()，reduceRight() 依次处理数组中每个成员，最终累计为一个值；<br>reduce从左到右，reduceRight从右到左</p></li><li><p>接收两个参数  回调函数，第一个参数的默认值</p></li><li><p>回调函数接收四个参数 前两个参数是必须的，后两个参数是可选的 👇</p><p><code>previousValue</code>: 上一次执行返回的累积值，默认为数组的第一个成员</p><p><code>currentValue</code>: 当前变量，[如果没有指定参数1的默认值] 默认为数组的第二个成员</p><p><code>currentIndex</code>: 当前位置，默认0</p><p><code>array</code>: 原数组</p></li><li><p><strong>如果数组为空，没有指定第一个参数的默认值，将抛出异常，如果指定了第一个参数的默认值，callback不会执行，该参数会被直接返回</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> reduceRes = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">previousValue, currentValue, currentIndex, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> previousValue + currentValue</span><br><span class="line">&#125;, <span class="string">&#x27;i am &#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reduceRes) <span class="comment">// &quot;i am zxy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> max = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b ? a : b) <span class="comment">// 找出数组中最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max) <span class="comment">// z</span></span><br></pre></td></tr></table></figure><hr><h3 id="Object-keys-Object-values"><a href="#Object-keys-Object-values" class="headerlink" title="Object.keys, Object.values"></a>Object.keys, Object.values</h3><ul><li>Object.keys(obj)： 返回一个由该对象自身的所有属性名组成的数组</li><li>Object.values(obj)： 返回一个由该对象自身的所有属性值组成的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">10000001</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zxyong&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key,<span class="variable language_">this</span>[key])</span><br><span class="line">&#125;, obj)</span><br><span class="line"><span class="comment">// &quot;obj.id = 10000001&quot;</span></span><br><span class="line"><span class="comment">// &quot;obj.name = zxyong&quot;</span></span><br><span class="line"><span class="comment">// &quot;obj.age = 18&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><ul><li>返回一个给定对象自身可枚举属性的键值对数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">10000001</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zxyong&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(k + <span class="string">&#x27; =&gt; &#x27;</span> + v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;a =&gt; 1&quot;</span></span><br><span class="line"><span class="comment">// &quot;b =&gt; 2&quot;</span></span><br><span class="line"><span class="comment">// &quot;c =&gt; 3&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames"></a>Object.getOwnPropertyNames</h3><ul><li>与 Object.keys类似，返回一个包含自身所有属性名的数组，（包含不可枚举的属性名）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(arr) <span class="comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;length&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>参考链接<br><a href="https://wangdoc.com/javascript/">https://wangdoc.com/javascript/</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo+git page搭建自己的博客网站</title>
      <link href="/posts/acb03bb7/"/>
      <url>/posts/acb03bb7/</url>
      
        <content type="html"><![CDATA[<p>👉 最近偶然在网上看到一个非常漂亮的个人博客网站，突然觉得自己作为一个前端攻城狮(小菜鸡)🙈，也要有一个这样的网站；<font color="red">❤</font>动不如行动，问了度娘后找到了最简便的方法，<font color="#70a1ff">GitHub+Hexo搭建静态博客网站</font>，下面介绍搭建过程，只需简单的几步。</p><h2 id="Hexo-👍"><a href="#Hexo-👍" class="headerlink" title="Hexo 👍"></a>Hexo 👍</h2><p>生成静态博客网页的一个脚手架，<a href="https://hexo.io/zh-cn/">hexo官网</a> 的api教程，插件，主题什么的都非常丰富，有耐心的同学可以去自己摸索一下，我这里只写一下怎么搞一个能跑起来的博客网站。</p><h2 id="安装hexo-🧰"><a href="#安装hexo-🧰" class="headerlink" title="安装hexo 🧰"></a>安装hexo 🧰</h2><p>安装前您的电脑上必须已经安装了 <a href="https://nodejs.org/zh-cn/">Node.js</a> 和 <a href="https://git-scm.com/downloads">Git</a>，如果已经安装这两个工具（不会安装的请自行百度吧），那么您就可以使用npm安装Hexo了，在任意目录打开终端，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="建站-⚔️"><a href="#建站-⚔️" class="headerlink" title="建站 ⚔️"></a>建站 ⚔️</h2><h3 id="初始化Hexo目录"><a href="#初始化Hexo目录" class="headerlink" title="初始化Hexo目录"></a>初始化Hexo目录</h3><p>依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;<span class="comment"># 初始化hexo目录  folder-目录名</span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;<span class="comment"># 进入hexo目录</span></span><br><span class="line">$ npm install<span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>如果以上步骤都正确，那么您现在的hexo目录结构应该是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><ul><li><p>_config.yml：网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p></li><li><p>package.json：应用的依赖信息。</p></li><li><p>scaffolds：<a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p></li><li><p>source：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p></li><li><p>themes：<a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p></li></ul><h2 id="运行-amp-部署-🚀"><a href="#运行-amp-部署-🚀" class="headerlink" title="运行&amp;部署 🚀"></a>运行&amp;部署 🚀</h2><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>在终端执行<code>hexo server</code>，执行成功后，在浏览器输入<code>localhost:4000</code>，然后回车，如果成功打开页面，那么恭喜🎉，第一步已经成功!</p><blockquote><p>如果执行遇到了报错，可能是因为hexo默认使用的4000端口被占用了，可以使用<code>hexo server -p 4000</code>指定端口运行。</p></blockquote><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>现在网站只是能在本地打开，如果想要随时随地的到处炫耀😎，那么我们要将它部署到GitHub上，这样就可以在任何地方打开了。</p><ol><li><p>新建git仓库</p><p>在自己的 <a href="https://github.com/">GitHub</a>上新建一个仓库*(没有的请自行去注册/登录)*，</p><p><img src="https://cdn.jsdelivr.net/gh/zxyongyo/pictures/blog/20210426170628.png" alt="GitHub新建仓库" title="GitHub新建仓库"></p></li><li><p>配置hexo部署到GitHub</p><p>用您的编辑器打开hexo根目录的<code>_config.yml</code>文件，找到最下面的<code>deploy</code>配置，添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:zxyo/zxyong.git</span> <span class="comment"># 改为您自己刚才建的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p>上面github: 的仓库地址一定要改为您自己的仓库ssh克隆的地址。<br>使用ssh地址而不用https是为了避免每次部署的时候都需要登录github账户。[<a href="">配置ssh</a>]</p></blockquote></li><li><p>部署到gitee</p><p>由于国内对访问GitHub的限制，我们也可以同时部署到gitee，配置方法与配置github相同，然后添加一行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:zxyo/zxyong.git</span> <span class="comment"># 改为您自己的仓库地址</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">git@gitee.com:zxyo/zxyong.git</span> <span class="comment"># 改为您自己的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>确保一切无误后，就可以使用命令部署了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean <span class="comment"># 清除缓存文件</span></span><br><span class="line">$ hexo gnerate <span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo deploy <span class="comment"># 部署到_config.yml中配置的git仓库中</span></span><br></pre></td></tr></table></figure><blockquote><p>在GitHub或Gitee的仓库设置里开启git page，就可以访问到您的博客了✌！<br>Gitee每次部署后都需要去手动更新git page。</p></blockquote></li></ol><h2 id="更换主题-🎨"><a href="#更换主题-🎨" class="headerlink" title="更换主题 🎨"></a>更换主题 🎨</h2><ol><li><p>hexo官网的 <a href="https://hexo.io/themes/">主题</a> 有很多，可以自己去找一个喜欢的，我用的是 <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly</a> 这个主题。</p></li><li><p>找到这个主题的 <a href="https://github.com/jerryc127/hexo-theme-butterfly">GitHub仓库</a> 或 <a href="https://gitee.com/iamjerryw/hexo-theme-butterfly">Gitee仓库</a> clone下来放到你的hexo项目的themes目录下。</p></li><li><p>修改<code>_config.yml</code>文件，把主题改为butterfly：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li><p>安装插件，如果你没有pug和stylus渲染器，执行命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>执行<code>hexo clean &amp; hexo d -g</code>重新打开网页就能看见更换后的样子啦！</p></li><li><p>主题配置</p><p>在<code>/themes/butterfly</code>目录下还有一个<code>_config.yml</code>配置文件，这个是你主题的配置文件，里面配置项很多可以查看 <a href="https://butterfly.js.org/posts/4aa8abbe/">官方文档</a> 进行自由配置。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
