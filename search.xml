<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>css-grid 网格布局</title>
      <link href="/posts/69e2d9c7/"/>
      <url>/posts/69e2d9c7/</url>
      
        <content type="html"><![CDATA[<h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><ul><li><code>display: grid</code> - 指定一个容器使用网格布局</li></ul><br><ul><li><code>grid-template-columns</code> - 指定每一列的列宽</li><li><code>grid-template-rows</code> - 指定每一行的行高</li><li><code>grid-template</code> - 以上两个属性的简写   </li></ul><br><ul><li><p><code>row-gap</code> - 设置行与行的间隔（行间距）</p></li><li><p><code>column-gap</code> - 设置列与列的间隔（列间距）</p></li><li><p><code>gap</code> - 以上两个属性的简写形式  <code>gap: &lt;row-gap&gt; &lt;column-gap&gt;</code></p></li></ul><br><ul><li><p><code>grid-template-areas</code> - 定义区域</p></li><li><p><code>grid-auto-flow</code> - 项目放置顺序；默认值是 <code>row</code> 表示先行后列， <code>column</code>表示先列后行</p></li></ul><br><ul><li><p><code>justify-items</code> - 单元格内容的水平位置</p></li><li><p><code>align-items</code> - 单元格内容的垂直位置</p></li><li><p><code>place-items</code> - 以上两个属性的简写形式  <code>place-items: &lt;align-items&gt; &lt;justify-items&gt;</code></p></li></ul><br><ul><li><p><code>justify-content</code> - 整个内容区域在容器中的水平位置</p></li><li><p><code>align-centent</code> - 整个内容区域在容器中的垂直位置</p></li><li><p><code>place-centent</code> - 以上两个属性的简写形式 <code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code></p></li><li><p><code>grid-auto-columns</code> - 设置浏览器自动创建的多余网格的列宽</p></li><li><p><code>grid-auto-rows</code> - 设置浏览器自动创建的多余网格的行高</p></li></ul><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><ul><li><p><code>grid-column-start</code> - 左边网格线所在的垂直网格线</p></li><li><p><code>grid-column-end</code> - 右边网格线所在的垂直网格线</p></li><li><p><code>grid-column</code> - 以上两个属性的简写形式 <code>grid-column: &lt;start-line&gt; / &lt;end-line&gt;</code></p></li></ul><br><ul><li><p><code>grid-row-start</code> - 上边网格线所在的水平网格线</p></li><li><p><code>grid-row-end</code> - 下边网格线所在的水平网格线</p></li><li><p><code>grid-row</code> - 以上两个属性的简写形式 <code>grid-row: &lt;start-line&gt; / &lt;end-line&gt;</code></p></li></ul><br><ul><li><p><code>grid-area</code> - 指定项目放在哪一个区域，</p><p>也能用作简写形式 <code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code></p></li></ul><br><ul><li><p><code>justify-self</code> - 设置单元格内容的水平位置</p></li><li><p><code>align-self</code> - 设置单元格内容的垂直位置</p></li><li><p><code>place-self</code> - 前面两个属性的简写形式  <code>place-self: &lt;align-self&gt; &lt;justify-self&gt;</code></p></li></ul><h3 id="函数与关键字"><a href="#函数与关键字" class="headerlink" title="函数与关键字"></a>函数与关键字</h3><ul><li><p><code>repeat()</code> - 用于简化重复值，该函数可以用于 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span> <span class="number">50px</span> <span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>auto-fill</code> - 自动填充至每行最大可容纳的单元格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>fr</code> - grid 容器中的可变长度单位，按比例分配剩余空间，在<code>grid-template-columns</code>、<code>grid-template-rows</code>及相关属性中使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">150px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>minmax()</code> - 定义一个长度闭区间，接受两个参数，分别为最小值和最大值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">1</span>fr);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程 - 阮一峰</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习使用笔记</title>
      <link href="/posts/4bae23a1/"/>
      <url>/posts/4bae23a1/</url>
      
        <content type="html"><![CDATA[<p><strong>本文记录我学习和使用  <code>git</code> 的笔记，记录学习和使用 git 遇到的问题和技巧。(持续更新…)</strong></p><h3 id="git-stash-储藏当前工作区"><a href="#git-stash-储藏当前工作区" class="headerlink" title="git-stash 储藏当前工作区"></a>git-stash 储藏当前工作区</h3><ul><li><code>git stash</code>命令用于将当前未提交（工作区和暂存区）的改动储藏起来，等处理完其它事之后再恢复。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前工作区</span></span><br><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   app.js</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"><span class="comment"># 储藏当前工作区</span></span><br><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: e146062 edit app.js</span><br><span class="line"><span class="comment"># 查看 stash 记录</span></span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: e146062 edit app.js</span><br><span class="line"><span class="comment"># 此时可以切换分支或进行其他工作</span></span><br><span class="line"><span class="comment"># 恢复最近一次的 stash， 并删除本次 stash 记录</span></span><br><span class="line">$ git stash pop</span><br><span class="line">On branch dev</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   app.js</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (771daab2d3e6c5adcff439e7856e89891b35b5f3)</span><br></pre></td></tr></table></figure><ul><li>可以多次<code>stash</code>，恢复的时候使用<code>git stash list</code>查看 stash 记录，然后恢复指定的 stash</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看储藏记录</span></span><br><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: e146062 edit app.js</span><br><span class="line">stash@&#123;1&#125;: WIP on dev: e146062 edit app.js</span><br><span class="line"><span class="comment"># 恢复 stash@&#123;0&#125;</span></span><br><span class="line">$ git stash apply stash@&#123;0&#125;</span><br><span class="line">On branch dev</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"><span class="comment"># 删除 stash@&#123;0&#125; 这条记录</span></span><br><span class="line">$ git stash drop stash@&#123;0&#125;</span><br><span class="line">Dropped stash@&#123;0&#125; (72bddc948a1fa80b9e84a072a6ab1f412c9f3b22)</span><br><span class="line"><span class="comment"># 以上两条命令等同于 git stash pop stash@&#123;0&#125;</span></span><br></pre></td></tr></table></figure><ul><li>可以看到以上两个储藏记录的标识信息完全一样，容易分不清每次储藏的什么内容，在使用 stash 时可以用<code>-m|--message</code>标识本次 stash</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -m <span class="string">&quot;stash message&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>git stash</code>默认不会储藏未跟踪（untracked）的文件，可以使用<code>-u|--include-untracked</code>储藏包括未跟踪的文件；或者使用<code>-a|--all</code>储藏包括未跟踪和忽略（.gitignore中指定）的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git stash push -um &quot;add index.js&quot; 包括未跟踪的文件</span></span><br><span class="line">$ git stash push --include-untracked --message <span class="string">&quot;add index.js&quot;</span></span><br><span class="line">Saved working directory and index state On dev: add index.js</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># git stash push -am &quot;add index.js&quot; 包括未跟踪和忽略的文件</span></span><br><span class="line">$ git stash push --all --message <span class="string">&quot;add index.js&quot;</span></span><br><span class="line">Saved working directory and index state On dev: add index.js</span><br></pre></td></tr></table></figure><h3 id="合并多个commit"><a href="#合并多个commit" class="headerlink" title="合并多个commit"></a>合并多个commit</h3><ul><li><code>git rebase</code> 命令用来在另一个分支基础之上重新应用提交，用于把一个分支的修改合并到当前分支。</li><li>也可以利用这个命令来合并多个某个分支的多条 commit。</li></ul><p>例如我的 git 历史提交中有这样的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">a9753cc (HEAD -&gt; master) edit app.js</span><br><span class="line">eb6604c edit app.js</span><br><span class="line">8239289 edit app.js</span><br><span class="line">2bb4ff1 create app.js</span><br><span class="line">c81bd04 edit README.md</span><br><span class="line">0a38a95 edit README.md</span><br><span class="line">e87226d edit README.md</span><br><span class="line">c30085a create README.md</span><br></pre></td></tr></table></figure><p>可以看到有很多 commit 的信息都是重复的。</p><p>这时就可以使用以下命令重新编辑以往7次的 commit 历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从HEAD版本开始往过去数7个版本(包含HEAD版本)</span></span><br><span class="line">$ git rebase -i HEAD~7</span><br><span class="line"><span class="comment"># 指定版本号前的所有版本(不包含此版本)</span></span><br><span class="line">$ git rebase -i c30085a</span><br></pre></td></tr></table></figure><blockquote><p><code>-i（--interactive）</code>：弹出交互式的界面进行编辑合并</p></blockquote><p>输入命令，按下回车后会弹出 vim，让你编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~7</span><br><span class="line">pick e87226d edit README.md</span><br><span class="line">pick 0a38a95 edit README.md</span><br><span class="line">pick c81bd04 edit README.md</span><br><span class="line">pick 2bb4ff1 create app.js</span><br><span class="line">pick 8239289 edit app.js</span><br><span class="line">pick eb6604c edit app.js</span><br><span class="line">pick a9753cc edit app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase c30085a..a9753cc onto c30085a (7 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick &lt;commit&gt; = 正常选中</span></span><br><span class="line"><span class="comment"># r, reword &lt;commit&gt; = 选中，并且修改提交信息</span></span><br><span class="line"><span class="comment"># e, edit &lt;commit&gt; = 选中，rebase时会暂停，允许你修改这个commit</span></span><br><span class="line"><span class="comment"># s, squash &lt;commit&gt; = 选中，会将当前commit与上一个commit合并，保留所有commit信息</span></span><br><span class="line"><span class="comment"># f, fixup [-C | -c] &lt;commit&gt; = 与squash相同，但不会保存当前commit的提交信息, </span></span><br><span class="line"><span class="comment">#                    unless -C is used, in which case</span></span><br><span class="line"><span class="comment">#                    keep only this commit&#x27;s message; -c is same as -C but</span></span><br><span class="line"><span class="comment">#                    opens the editor</span></span><br><span class="line"><span class="comment"># x, exec &lt;command&gt; = 执行其他shell命令</span></span><br><span class="line"><span class="comment"># b, break = 停在这里，可以使用&#x27;git rebase --continue&#x27;继续rebase</span></span><br><span class="line"><span class="comment"># d, drop &lt;commit&gt; = 删除这个commit，这次提交的所有更改也会丢弃</span></span><br><span class="line"><span class="comment"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br></pre></td></tr></table></figure><p>编辑如下，然后 <code>:wq</code> 保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把 c81bd04 和 0a38a95 合并到 e87226d,不保留 0a38a95 和 c81bd04 的 commit message</span></span><br><span class="line">pick e87226d edit README.md</span><br><span class="line">f 0a38a95 edit README.md</span><br><span class="line">f c81bd04 edit README.md</span><br><span class="line">pick 2bb4ff1 create app.js</span><br><span class="line"><span class="comment"># 把 a9753cc 和 eb6604c 合并到 8239289,保留所有 commit message</span></span><br><span class="line">pick 8239289 edit app.js</span><br><span class="line">s eb6604c edit app.js</span><br><span class="line">s a9753cc edit app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>然后又会弹出一个 vim 让编辑 commit message，编辑如下，然后 <code>:wq</code> 保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 3 commits.</span></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line">edit app.js</span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line">add main fn</span><br><span class="line"><span class="comment"># This is the commit message #3:</span></span><br><span class="line">update server port</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>这时再查看合并后的 log，一下就简洁了好多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">714f406 (HEAD -&gt; master) edit app.js</span><br><span class="line">e17c8ac create app.js</span><br><span class="line">949598c edit README.md</span><br><span class="line">c30085a create README.md</span><br></pre></td></tr></table></figure><p><strong>解决冲突</strong></p><ul><li>在 <code>git rebase</code> 时可能会发生冲突，这时就需要先去解决冲突。</li><li>解决完冲突后再 <code>git add .</code>，然后继续 rebase <code>git rebase --continue</code></li><li>如果被合并的 commit，合并前已经推送到了远程库，可能无法正常推送到远程库，可以使用 <code>--force</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是多人协作开发不建议使用</span></span><br><span class="line">$ git push --force origin master</span><br></pre></td></tr></table></figure><hr><h3 id="修改-commit-的信息"><a href="#修改-commit-的信息" class="headerlink" title="修改 commit 的信息"></a>修改 commit 的信息</h3><p><strong>修改上一次提交的 commit 信息：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend --message=<span class="string">&quot;commit message&quot;</span></span><br></pre></td></tr></table></figure><p><strong>修改历史提交的 commit 信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">a2cf832 (HEAD -&gt; master) edit app.js</span><br><span class="line">8e5130d insert one line from app.js</span><br><span class="line">4968028 delete one line from app.js</span><br><span class="line">e17c8ac create app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 8e5130d 和 4968028 的 commit message</span></span><br><span class="line">$ git rebase -i HEAD~3 <span class="comment"># 或者 git rebase -i e17c8ac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把要修改的 commit 前的 pick 改为 r 或 reword</span></span><br><span class="line">r 4968028 delete one line from app.js</span><br><span class="line">r 8e5130d insert one line from app.js</span><br><span class="line">pick a2cf832 edit app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># :wq 保存并退出，然后依次修改 commit message，:wq 保存并退出</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">e146062 (HEAD -&gt; master) edit app.js</span><br><span class="line">c1fe1bf 从 app.js 中新增一行</span><br><span class="line">91ea1e8 从 app.js 中删除一行</span><br><span class="line">e17c8ac create app.js</span><br><span class="line"><span class="comment"># 就修改成功了</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts实用类型</title>
      <link href="/posts/ded4ef6d/"/>
      <url>/posts/ded4ef6d/</url>
      
        <content type="html"><![CDATA[<p><strong>TypeSciprt 提供了几种实用类型，方便常见的类型转换。这些类型在全局可用。</strong></p><blockquote><p>原文链接：<a href="https://www.typescriptlang.org/docs/handbook/utility-types.html"><em>https://www.typescriptlang.org/docs/handbook/utility-types.html</em></a></p></blockquote><h3 id="Partial-lt-Type-gt"><a href="#Partial-lt-Type-gt" class="headerlink" title="Partial&lt;Type&gt;"></a>Partial&lt;Type&gt;</h3><p>构造一个将给定类型<code>Type</code>的所有属性设置为可选的类型，该实用类型返回给定类型的所有子集的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateTodo</span>(<span class="params">todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...todo, ...fieldsToUpdate &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todo1 = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;organize desk&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;clear clutter&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todo2 = <span class="title function_">updateTodo</span>(todo1, &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;throw out trash&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Required-lt-Type-gt"><a href="#Required-lt-Type-gt" class="headerlink" title="Required&lt;Type&gt;"></a>Required&lt;Type&gt;</h3><p>构造一个将给定类型<code>Type</code>的所有属性设置为必需的类型，和<code>Partial</code>相反。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  a?: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj2</span>: <span class="title class_">Required</span>&lt;<span class="title class_">Props</span>&gt; = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br><span class="line"><span class="comment">// Property &#x27;b&#x27; is missing in type &#x27;&#123; a: number; &#125;&#x27; but required in type &#x27;Required&lt;Props&gt;&#x27;.</span></span><br></pre></td></tr></table></figure><h3 id="Readonly-lt-Type-gt"><a href="#Readonly-lt-Type-gt" class="headerlink" title="Readonly&lt;Type&gt;"></a>Readonly&lt;Type&gt;</h3><p>构造一个将给定类型<code>Type</code>的所有属性设置为只读的类型。将不能重新给所构造类型的属性分配值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Delete inactive users&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">todo.<span class="property">title</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="comment">// Cannot assign to &#x27;title&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><h3 id="Record-lt-Keys-Type-gt"><a href="#Record-lt-Keys-Type-gt" class="headerlink" title="Record&lt;Keys, Type&gt;"></a>Record&lt;Keys, Type&gt;</h3><p>构造一个对象类型，其键的属性为<code>Keys</code>，值的属性为<code>Type</code>。这个工具类型可以用于将一个类型的属性映射到另一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CatInfo</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CatName</span> = <span class="string">&quot;miffy&quot;</span> | <span class="string">&quot;boris&quot;</span> | <span class="string">&quot;mordred&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">cats</span>: <span class="title class_">Record</span>&lt;<span class="title class_">CatName</span>, <span class="title class_">CatInfo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">miffy</span>: &#123; <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">breed</span>: <span class="string">&quot;Persian&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">boris</span>: &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">breed</span>: <span class="string">&quot;Maine Coon&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">mordred</span>: &#123; <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">breed</span>: <span class="string">&quot;British Shorthair&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Pick-lt-Type-Keys-gt"><a href="#Pick-lt-Type-Keys-gt" class="headerlink" title="Pick&lt;Type, Keys&gt;"></a>Pick&lt;Type, Keys&gt;</h3><p>通过从给定的类型<code>Type</code>中选择一组属性<code>Keys</code>（字符串字面量或字符串字面量的联合）构建一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Omit-lt-Type-Keys-gt"><a href="#Omit-lt-Type-Keys-gt" class="headerlink" title="Omit&lt;Type, Keys&gt;"></a>Omit&lt;Type, Keys&gt;</h3><p>通过从给定类型<code>Tpye</code>中移除<code>Keys</code>（字符串字面量或字符串字面量的联合）构造一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;description&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Clean room&#x27;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="number">1615544252770</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoInfo</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;completed&#x27;</span> | <span class="string">&#x27;createdAt&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todoInfo</span>: <span class="title class_">TodoInfo</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Pick up kids&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Kindergarten closes at 5pm&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exclude-lt-UnionType-ExcludedMembers-gt"><a href="#Exclude-lt-UnionType-ExcludedMembers-gt" class="headerlink" title="Exclude&lt;UnionType, ExcludedMembers&gt;"></a>Exclude&lt;UnionType, ExcludedMembers&gt;</h3><p>通过从<code>UnionType</code>中排除可分配给<code>ExcludedMembers</code>的所有联合成员构造一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type T0 = &#x27;b&#x27; | &#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = &#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Exclude</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="Extract-lt-Type-Union-gt"><a href="#Extract-lt-Type-Union-gt" class="headerlink" title="Extract&lt;Type, Union&gt;"></a>Extract&lt;Type, Union&gt;</h3><p>通过从给定类型<code>Type</code>中提取可分配给<code>Union</code>的所有联合成员来构造一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type T0 = &quot;a&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Extract</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;f&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = () =&gt; void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Extract</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="NonNullable-lt-Type-gt"><a href="#NonNullable-lt-Type-gt" class="headerlink" title="NonNullable&lt;Type&gt;"></a>NonNullable&lt;Type&gt;</h3><p>通过从给定类型<code>Type</code>中排除<code>null</code>和undefined`来构造一个类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type T0 = string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = string[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span>[] | <span class="literal">null</span> | <span class="literal">undefined</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="Parameters-lt-Type-gt"><a href="#Parameters-lt-Type-gt" class="headerlink" title="Parameters&lt;Type&gt;"></a>Parameters&lt;Type&gt;</h3><p>从给定的函数类型<code>Type</code>的形参中使用的类型构造一个元组类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">arg: &#123; a: <span class="built_in">number</span>; b: <span class="built_in">string</span> &#125;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T0 = []</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Parameters</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = [s: string]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Parameters</span>&lt;<span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = [arg: unknown]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Parameters</span>&lt;&lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T3 = [arg: &#123; a: number; b: string &#125;]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">Parameters</span>&lt;<span class="keyword">typeof</span> f1&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T4 = unknown[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T5 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">Parameters</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; provides no match for the signature &#x27;(...args: any): any&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T7</span> = <span class="title class_">Parameters</span>&lt;<span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="ConstructorParameters-lt-Type-gt"><a href="#ConstructorParameters-lt-Type-gt" class="headerlink" title="ConstructorParameters&lt;Type&gt;"></a>ConstructorParameters&lt;Type&gt;</h3><p>用给定的构造函数的类型<code>Type</code>构造元组或数组。生成一个具有所有形参类型的元组类型（如果<code>Type</code>不是函数，该类型为<code>never</code>）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type T0 = [message?: string | undefined, options?: ErrorOptions | undefined]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">ErrorConstructor</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = string[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">FunctionConstructor</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = [pattern: string | RegExp, flags?: string | undefined]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">RegExpConstructor</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T3 = unknown[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; does not satisfy the constraint &#x27;abstract new (...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">// Type &#x27;Function&#x27; provides no match for the signature &#x27;new (...args: any): any&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="title class_">Function</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="ReturnType-lt-Type-gt"><a href="#ReturnType-lt-Type-gt" class="headerlink" title="ReturnType&lt;Type&gt;"></a>ReturnType&lt;Type&gt;</h3><p>构造一个由给定函数类型<code>Type</code>的返回类型组成的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f1</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T0 = string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">ReturnType</span>&lt;<span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = unknown</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">ReturnType</span>&lt;&lt;T&gt;<span class="function">() =&gt;</span> T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T3 = number[]</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">ReturnType</span>&lt;&lt;T <span class="keyword">extends</span> U, U <span class="keyword">extends</span> <span class="built_in">number</span>[]&gt;<span class="function">() =&gt;</span> T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T4 = &#123; a: number; b: string; &#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> f1&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T5 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T6 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T6</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T7</span> = <span class="title class_">ReturnType</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Type &#x27;Function&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">Type &#x27;Function&#x27; provides no match for the signature &#x27;(...args: any): any&#x27;. */</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T8</span> = <span class="title class_">ReturnType</span>&lt;<span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="InstanceType-lt-Type-gt"><a href="#InstanceType-lt-Type-gt" class="headerlink" title="InstanceType&lt;Type&gt;"></a>InstanceType&lt;Type&gt;</h3><p>构造一个类型，由<code>Type</code>中构造函数实力类型组成。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  x = <span class="number">0</span></span><br><span class="line">  y = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T0 = C</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> C&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T1 = any</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type T2 = never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; does not satisfy the constraint &#x27;abstract new (...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">InstanceType</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Type &#x27;Function&#x27; does not satisfy the constraint &#x27;abstract new (...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">  Type &#x27;Function&#x27; provides no match for the signature &#x27;new (...args: any): any&#x27;. */</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">InstanceType</span>&lt;<span class="title class_">Function</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="ThisParameterType-lt-Type-gt"><a href="#ThisParameterType-lt-Type-gt" class="headerlink" title="ThisParameterType&lt;Type&gt;"></a>ThisParameterType&lt;Type&gt;</h3><p>提取函数类型<code>Type</code>的<code>this形参</code>的类型，如果<code>Type</code>没有此形参，则为<code>unknown</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">numberToString</span>(<span class="params">n: ThisParameterType&lt;<span class="keyword">typeof</span> toHex&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> toHex.<span class="title function_">apply</span>(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OmitThisParameter-lt-Type-gt"><a href="#OmitThisParameter-lt-Type-gt" class="headerlink" title="OmitThisParameter&lt;Type&gt;"></a>OmitThisParameter&lt;Type&gt;</h3><p>从函数类型<code>Type</code>中移除<code>this形参</code>。如果<code>Type</code>没有显式声明<code>this</code>形参，结果就是<code>Type</code>。否则，将依照<code>Type</code>创建一个不带此形参的新函数。泛型被删除，只有最后一个重载签名被传到新的函数类型中。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fiveToHex</span>: <span class="title class_">OmitThisParameter</span>&lt;<span class="keyword">typeof</span> toHex&gt; = toHex.<span class="title function_">bind</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fiveToHex</span>())</span><br></pre></td></tr></table></figure><h3 id="ThisType-lt-Type-gt"><a href="#ThisType-lt-Type-gt" class="headerlink" title="ThisType&lt;Type&gt;"></a>ThisType&lt;Type&gt;</h3><p>该实用类型不返回转换后的类型。它是上下文<code>this</code>类型的标记。要使用这个实用类型，必须启用<code>noImplicitThis</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ObjectDescriptor</span>&lt;D, M&gt; = &#123;</span><br><span class="line">  data?: D;</span><br><span class="line">  methods?: M &amp; <span class="title class_">ThisType</span>&lt;D &amp; M&gt;; <span class="comment">// Type of &#x27;this&#x27; in methods is D &amp; M</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> makeObject&lt;D, M&gt;(<span class="attr">desc</span>: <span class="title class_">ObjectDescriptor</span>&lt;D, M&gt;): D &amp; M &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">data</span>: <span class="built_in">object</span> = desc.<span class="property">data</span> || &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">methods</span>: <span class="built_in">object</span> = desc.<span class="property">methods</span> || &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...data, ...methods &#125; <span class="keyword">as</span> D &amp; M</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">makeObject</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">moveBy</span>(<span class="params">dx: <span class="built_in">number</span>, dy: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">x</span> += dx <span class="comment">// Strongly typed this</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> += dy <span class="comment">// Strongly typed this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj.<span class="property">x</span> = <span class="number">10</span></span><br><span class="line">obj.<span class="property">y</span> = <span class="number">20</span></span><br><span class="line">obj.<span class="title function_">moveBy</span>(<span class="number">5</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="Uppercase-lt-StringType-gt"><a href="#Uppercase-lt-StringType-gt" class="headerlink" title="Uppercase&lt;StringType&gt;"></a>Uppercase&lt;StringType&gt;</h3><p>将字符串中的每个字符串转换为大写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type ShoutyGreeting = &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ShoutyGreeting</span> = <span class="title class_">Uppercase</span>&lt;<span class="title class_">Greeting</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ASCIICacheKey</span>&lt;<span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="string">`ID-<span class="subst">$&#123;Uppercase&lt;Str&gt;&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type MainID = &quot;ID-MY_APP&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MainID</span> = <span class="title class_">ASCIICacheKey</span>&lt;<span class="string">&#x27;my_app&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>Lowercase&lt;StringType&gt;</p><p>将字符串中的每个字符串转换为小写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type ShoutyGreeting = &quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ShoutyGreeting</span> = <span class="title class_">Lowercase</span>&lt;<span class="title class_">Greeting</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ASCIICacheKey</span>&lt;<span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="string">`ID-<span class="subst">$&#123;Lowercase&lt;Str&gt;&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type MainID = &quot;ID-my_app&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MainID</span> = <span class="title class_">ASCIICacheKey</span>&lt;<span class="string">&#x27;my_app&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Capitalize-lt-StringType-gt"><a href="#Capitalize-lt-StringType-gt" class="headerlink" title="Capitalize&lt;StringType&gt;"></a>Capitalize&lt;StringType&gt;</h3><p>将字符串的第一个字符转为大写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LowercaseGreeting</span> = <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Greeting = &quot;Hello, world&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Greeting</span> = <span class="title class_">Capitalize</span>&lt;<span class="title class_">LowercaseGreeting</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="Uncapitalize-lt-StringType-gt"><a href="#Uncapitalize-lt-StringType-gt" class="headerlink" title="Uncapitalize&lt;StringType&gt;"></a>Uncapitalize&lt;StringType&gt;</h3><p>将字符串的第一个字符转为小写。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UppercaseGreeting</span> = <span class="string">&quot;HELLO WORLD&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type UncomfortableGreeting = &quot;hELLO WORLD&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UncomfortableGreeting</span> = <span class="title class_">Uncapitalize</span>&lt;<span class="title class_">UppercaseGreeting</span>&gt;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css切角效果</title>
      <link href="/posts/1f5ea842/"/>
      <url>/posts/1f5ea842/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20220310163254.jpg" alt="箭头"></p><p>如上图👆这种，切掉一个矩形的一个或多个角的设计效果，前端在切图时会经常遇到这样的场景，如何使用css轻易实现这种效果？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>使用css的<strong>渐变</strong>就能实现这种效果。假设我们需要一个右下角被切掉的效果，我们只需要一个<strong>从右下角到左上角（-45deg）的线性渐变</strong>，从透明色开始渐变，然后在相同的位置设置另一个色值就能实现。（假设切角深度为35px）：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">35px</span>, <span class="number">#C02A79</span> <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20220310170839.jpg" alt="切角"></p><ul><li>现在，我们来把它变成一个向右箭头的样子，只需要再为它加一层渐变：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: </span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>, transparent <span class="number">35px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">35px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom;</span><br></pre></td></tr></table></figure><p>如果你运行了上面的代码你就会发现，结果是这个样子的😱。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20220310171612.jpg"></p><ul><li>这是因为我们使用了两层渐变，默认情况下，两层渐变都会填满整个元素，会相互覆盖，而且两层渐变都会默认平铺整个元素，所以我们需要设置<code>background-size</code>让每层渐变只占据元素的一半，并关掉<code>background-repeat</code>：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: </span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>, transparent <span class="number">35px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">35px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20220310172416.jpg" alt="箭头"></p><ul><li>看到这里你应该也知道怎么做出4个切角的效果了：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: </span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top left,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top right,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom right,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom left;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20220310173032.jpg" alt="4个切角"></p><ul><li>虽然实现了我们想要的效果，但是上面的代码非常臃肿切难以维护，每当我们需要修改背景颜色或切角尺寸时，都需要修改4处，我们可以使用<strong>css预处理器</strong>减少代码的重复度。例如使用<strong>scss</strong>：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> beveled-corners(<span class="variable">$bg</span>, <span class="variable">$tl</span>:<span class="number">0</span>, <span class="variable">$tr</span>:<span class="variable">$tl</span>, <span class="variable">$br</span>:<span class="variable">$tl</span>, <span class="variable">$bl</span>:<span class="variable">$tr</span>) &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$bg</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">      <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, transparent <span class="variable">$tl</span>, <span class="variable">$bg</span> <span class="number">0</span>) top left,</span><br><span class="line">      <span class="built_in">linear-gradient</span>(<span class="number">225deg</span>, transparent <span class="variable">$tr</span>, <span class="variable">$bg</span> <span class="number">0</span>) top right,</span><br><span class="line">      <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="variable">$br</span>, <span class="variable">$bg</span> <span class="number">0</span>) bottom right,</span><br><span class="line">      <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="variable">$bl</span>, <span class="variable">$bg</span> <span class="number">0</span>) bottom left;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要的时候就可以直接调用它，传入2-5个参数：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@include</span> beveled-corners(<span class="number">#C02A79</span>, <span class="number">15px</span>); <span class="comment">// 4个15px的切角 </span></span><br><span class="line"><span class="keyword">@include</span> beveled-corners(<span class="number">#C02A79</span>, <span class="number">0</span>， <span class="number">15px</span>, <span class="number">15px</span>, <span class="number">0</span>); <span class="comment">// 只有左上和左下15px的切角 </span></span><br></pre></td></tr></table></figure><h2 id="弧形切角"><a href="#弧形切角" class="headerlink" title="弧形切角"></a>弧形切角</h2><ul><li>有了上面实现切角的经验，如果想要实现弧形切角的话也就很容易了。只需要把上面的线性渐变换成径向渐变即可：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at top left, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top left,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at top right, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) top right,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at bottom right, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom right,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at bottom left, transparent <span class="number">15px</span>, <span class="number">#C02A79</span> <span class="number">0</span>) bottom left;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20220311110911.jpg" alt="css弧形切角"></p><ul><li>以后再遇到类似这种的切角效果就不用麻烦UI小姐姐🤦切图啦。（下图完整代码看<a href="https://codepen.io/pen?template=WNdewEE">👉这里👈</a>）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20220311145050.jpg" alt="优惠券"></p><h2 id="另一种解决方案-clip-path"><a href="#另一种解决方案-clip-path" class="headerlink" title="另一种解决方案(clip-path)"></a>另一种解决方案(clip-path)</h2><ul><li>使用css的<code>clip-path</code>属性的<code>polygon</code>函数，也能够实现同样的效果，例如将一个元素切出4个20px的斜面切角：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: deepskyblue;</span><br><span class="line"><span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(</span><br><span class="line">    <span class="number">20px</span> <span class="number">0</span>, <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="number">0</span>, </span><br><span class="line">    <span class="number">100%</span> <span class="number">20px</span>, <span class="number">100%</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>), </span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="number">100%</span>, <span class="number">20px</span> <span class="number">100%</span>, </span><br><span class="line">    <span class="number">0</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>), <span class="number">0</span> <span class="number">20px</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20220311152912.jpg" alt="使用clip-path实现切角"></p><ul><li>这种方法的代码确实短了很多，但是它写起来却并不比使用渐变简单，而且不容易维护，假如我们要改动切角的尺寸，那需要改动八处！这种方法的好处是我们可以对任意类型的背景（比如图片）进行裁切。</li></ul><h2 id="附-线性渐变角度"><a href="#附-线性渐变角度" class="headerlink" title="附 - 线性渐变角度"></a>附 - 线性渐变角度</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20220311162257.jpg" alt="线性渐变角度"></p><ul><li>如上图<code>0deg</code>代表渐变方向为<strong>从下到上</strong>，<code>45deg</code>代表从<strong>左下到右上</strong>,<code>90deg</code>代表<strong>从左向右</strong>，诸如此类正角度代表顺时针方向，负角度代表逆时针方向；当然你也可以使用另一种方法指定渐变的方向：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to top right, blue, pink);</span><br><span class="line">// 等同于</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, blue, pink);</span><br></pre></td></tr></table></figure><blockquote><p>内容来自<a href="https://book.douban.com/subject/26745943/"><em>《css揭秘》</em></a>一书；<br>对css渐变不熟悉的同学可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Images/Using_CSS_gradients"><em>MDN-css渐变</em></a>；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始使用git管理您的代码</title>
      <link href="/posts/524f855e/"/>
      <url>/posts/524f855e/</url>
      
        <content type="html"><![CDATA[<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul><li><p>git 安装地址： <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p></li><li><p>安装完成后，在桌面右键菜单找到“Git Bash”，点击蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210507162251.png" alt="git"></p></li><li><p>确认安装成功后，还需要最后一步设置，在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p><em>说明：git config –list  命令可以查看当前Git环境所有配置</em></p></li></ul><h2 id="注册GitHub及创建远程仓库"><a href="#注册GitHub及创建远程仓库" class="headerlink" title="注册GitHub及创建远程仓库"></a>注册GitHub及创建远程仓库</h2><ul><li><p>注册GitHub： <a href="https://github.com/">https://github.com</a> </p><p>注册并登录成功之后，进到GitHub主页，在页面有上方用户菜单上选择 “+”-&gt;New repository 创建一个新的仓库</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210507162810.png" alt="创建仓库"></p><p>给仓库取一个名字，点击创建仓库按钮 你将成功创建一个仓库</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210507163033.png" alt="新建仓库"></p></li></ul><h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><ul><li>在你自己的电脑合适的地方创建一个目录，进到这个目录，打开git bash通过<code>git init</code>命令把这个目录变成Git可以管理的仓库。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210507163509.png" alt="创建本地仓库"></p><h2 id="将本地仓库和远程库关联"><a href="#将本地仓库和远程库关联" class="headerlink" title="将本地仓库和远程库关联"></a>将本地仓库和远程库关联</h2><p>​        为了把本地的仓库与github的仓库关联起来，还需要配置ssh key。</p><ul><li><p>创建ssh key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>然后一路回车，如果创建成功，本地用户主目录下就会有一个 <code>.ssh</code>文件，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。<br>你可以<code>cd ~/.ssh</code>查看你的ssh key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">Administrator@WIN-J9R6H39JOF7 MINGW64 ~/.ssh</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">id_rsa  id_rsa.pub  known_hosts</span><br><span class="line">$ <span class="built_in">cat</span> id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDpVE44p3iltnmBgTyBtLMh6Hr1qyPOEziCXrM2vAqOK4O+Tv3FkzsDlaj...</span><br></pre></td></tr></table></figure><p>这个就是你的公钥，把它复制到GitHub进行配置:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210507164311.png" alt="配置ssh key"></p></li><li><p>接下来就可以把远程GitHub库和本地仓库关联了</p><p>用 <code>git remote add 仓库名 仓库地址</code>的命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:ZxyongYo/test.git</span><br></pre></td></tr></table></figure><p>你的仓库地址在这哦</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210507164636.png" alt="关联远程仓库"></p><p>现在，你就可以把本地库的所有内容推送到远程库上了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Everything up-to-date</span><br><span class="line">Branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;master&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br></pre></td></tr></table></figure><p>提示:如果这一步报错了 是因为远程库与本地库不一致造成的，那么我们把远程库同步到本地库就可以了。<br>使用指令<code>git pull origin master</code><br>然后再push就行了。</p></li></ul><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><h3 id="克隆（clone）"><a href="#克隆（clone）" class="headerlink" title="克隆（clone）"></a>克隆（clone）</h3><p>在实际开发中,大多数时候，我们没有机会从头init仓库，而是远程仓库已经存在，我们要参与到项目中，这时只需要将远程仓库clone下来就好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> 仓库地址</span><br></pre></td></tr></table></figure><p>新项目还在开发阶段，没有正式对外发布，所以开发同事合并代码到<strong>dev</strong>分支上(或者其他名称分支上)，而不是到默认分支上, 这时我们需要使用命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b dev 仓库地址</span><br></pre></td></tr></table></figure><h3 id="分支（branch）"><a href="#分支（branch）" class="headerlink" title="分支（branch）"></a>分支（branch）</h3><p>通常情况下, 我们自己在协助开发, 需要添加一个新功能的时候, 是不能在主分支上直接修改的, 需要我们自己再创建一个新的分支, 等新功能开发完成后再合并到主分支 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 新建一个debug分支</span></span><br><span class="line">$ git branch debug</span><br><span class="line"><span class="comment">## 切换到debug分支</span></span><br><span class="line"><span class="comment">## 可简写为 git checkout -b debug</span></span><br><span class="line">$ git checkout debug</span><br><span class="line">Switched to branch <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">## 查看分支，当前已经在debug分支上面</span></span><br><span class="line">$ git branch</span><br><span class="line">* debug</span><br><span class="line">  master</span><br><span class="line"><span class="comment">## debug解决后，把修改合并到master，并删除debug分支</span></span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge debug </span><br><span class="line">$ git branch -d debug</span><br></pre></td></tr></table></figure><h3 id="拉取别人的提交"><a href="#拉取别人的提交" class="headerlink" title="拉取别人的提交"></a>拉取别人的提交</h3><p>在我们完成了某项功能的修改，需要push到远程的时候，其他协作者可能已经提交了他们的修改，这时，我们需要先把最新的提交拉取下来，加入我们的修改，再重新提交上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line"><span class="comment">## push被驳回了，因为有其他人已经提交了更新</span></span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">&#x27;git@github.com:JavyZheng/git_demo.git&#x27;</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., <span class="string">&#x27;git pull ...&#x27;</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">&#x27;Note about fast-forwards&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;git push --help&#x27;</span> <span class="keyword">for</span> details </span><br><span class="line"><span class="comment">## 拉取远程提交内容并合并到当前工作区</span></span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment">## 重新push到远程</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>当拉取协作者的提交时，很可能不同开发者修改了同一个文件的同一部分，这时候，就会出现冲突，我们需要手动解决这些冲突，再重新提交上去。</p><p><strong>例如冲突代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="variable constant_">HEAD</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;This is master branch.&#x27;</span>);</span><br><span class="line">=======</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;This is developOne1 branch.&#x27;</span>);</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; developOne</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据需求我们手动将代码改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;This is master branch.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再提交就没有问题了。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底弄懂 js中事件冒泡和捕获🎈</title>
      <link href="/posts/81781fa3/"/>
      <url>/posts/81781fa3/</url>
      
        <content type="html"><![CDATA[<h2 id="事件触发经历的三个阶段"><a href="#事件触发经历的三个阶段" class="headerlink" title="事件触发经历的三个阶段"></a>事件触发经历的三个阶段</h2><ol><li><p>首先我们要弄清楚当一个dom事件被触发时，它不仅仅是单纯地在自身对象上触发一次，而是经历了三个不同的阶段：👇<br>1）<strong>捕获阶段</strong>：从文档的根节点<code>document</code>到触发事件的对象，<font color="red">从外向内捕获事件对象</font>；<br>2）<strong>目标阶段</strong>：到达目标事件位置，触发事件；<br>3）<strong>冒泡阶段</strong>：再从目标事件位置往文档的根节点方向回溯，<font color="red">从内向外冒泡事件对象</font>。</p></li><li><p>下面是 <a href="https://www.w3.org/TR/DOM-Level-3-Events/#event-flow" title="w3c事件流">w3c解释事件流</a> 的图：<br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210428110115.jpg" alt="事件流" title="事件流"></p></li></ol><h2 id="冒泡和捕获"><a href="#冒泡和捕获" class="headerlink" title="冒泡和捕获"></a>冒泡和捕获</h2><ol><li><p>当我们注册一个事件时，事件默认使用冒泡事件流，不使用捕获事件流。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">addEventListener</span>(event, listener, useCapture)</span><br></pre></td></tr></table></figure><p><strong>event：</strong>必须。字符串，指定<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" title="事件参考|MDN">事件类型</a>。<br><strong>listener：</strong>必须。一个实现了 <code>EventListener</code> 接口的对象，或者是一个事件处理函数<br><strong>useCapture：</strong>可选。布尔值，指定事件是否在捕获或冒泡阶段执行。<code>false</code>为冒泡（默认），<code>true</code>为捕获。 </p></li><li><p>下面在代码中验证，直接附上全部代码。（可以粘到自己编辑器中运行、尝试一下）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>event<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#one</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#two</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#three</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: deepskyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>one</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>two</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;three&quot;</span>&gt;</span>three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> one = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;one&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> two = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;two&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> three = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;three&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    one.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one捕获&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    two.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two捕获&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    three.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three捕获&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    one.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one冒泡&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">    two.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two冒泡&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">    three.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three冒泡&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当我们点击three时，可以看到确实是先由外向内事件捕获，一直到事发元素，再由内向外冒泡到根节点上。<br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210428110353.png" alt="js事件" title="冒泡&amp;捕获"></p></li><li><p>如果一个元素既注册了冒泡事件，也注册了捕获事件，则按照注册顺序执行。<br>我们修改代码把冒泡事件放在捕获事件之前：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">one.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one冒泡&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line">two.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two冒泡&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line">three.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three冒泡&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line">   </span><br><span class="line">one.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one捕获&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">two.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two捕获&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">three.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three捕获&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>再点击three，可以看到这次three先是先冒泡后捕获的，由此可见一个元素同时注册了冒泡和捕获事件，则会按照注册顺序执行。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210428110502.png" alt="js事件" title="冒泡&amp;捕获"></p></li></ol><h2 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h2><ul><li><p>在很多时候我们并不需要元素绑定的事件向外冒泡，这时我们就要阻止事件的冒泡。<br>阻止冒泡：w3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true；<br>我们再次修改代码，阻止three的事件冒泡：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">three.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three冒泡&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> e = event || <span class="variable language_">window</span>.<span class="property">event</span>; <span class="comment">// firefox下window.event为null, IE下event为null</span></span><br><span class="line">  <span class="comment">// 阻止冒泡</span></span><br><span class="line">  <span class="keyword">if</span>(e.<span class="property">stopPropagation</span>)&#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>()<span class="comment">//其他浏览器</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    e.<span class="property">cancelBubble</span> = <span class="literal">true</span> <span class="comment">//IE浏览器</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li><li><p>修改完代码后我们再次点击three，可以看到three的点击事件触发后就停止继续向外冒泡了；</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210428110554.png" alt="js事件" title="冒泡&amp;捕获"></p></li></ul><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><ul><li><p>了解了JavaScript中事件的冒泡和捕获后，我就可以利用js的这种机制完成一些代码上的优化了。</p><p>例如现在有这样的一段代码👇</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要给一个有很多子元素的列表中的每一个<code>li</code>绑定一个事件，如果我们直接手动给每个<code>li</code>绑定事件，不仅非常的麻烦🤮，而且也会造成很大的资源浪费。</p><p>这个时候我们就可以利用<font color='red'>事件冒泡机制</font>将监听事件只绑定在父元素<code>ul</code>上面，当事件触发时再判断触发事件的目标元素，来完成我们的操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>)</span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// 兼容性处理</span></span><br><span class="line">  <span class="keyword">var</span> event = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">  <span class="keyword">var</span> target = event.<span class="property">target</span> || event.<span class="property">srcElement</span>;</span><br><span class="line">  <span class="comment">// 判断是不是目标元素</span></span><br><span class="line">  <span class="keyword">if</span>(target.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">innerHTML</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样当<code>#list</code>下的<code>li</code>被点击后我们就可以获取到被点击的<code>li</code>完成我们的操作了🤗。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组和对象遍历方法</title>
      <link href="/posts/bee75f83/"/>
      <url>/posts/bee75f83/</url>
      
        <content type="html"><![CDATA[<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span> <span class="comment">// 跳出循环</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span> <span class="comment">// 跳过本次循环</span></span><br><span class="line">  &#125;</span><br><span class="line">  str += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// &quot;13579&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]) <span class="comment">// z, x, y, o, n, g</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="for-…-in"><a href="#for-…-in" class="headerlink" title="for … in"></a>for … in</h3><ul><li>以任意顺序迭代一个对象的除<code>Symbol</code>以外的可枚举属性，包括继承的可枚举属性。（<em>for … in是为遍历对象属性而构建的，不建议与数组一起使用</em>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj.&#x27;</span> + k + <span class="string">&#x27; = &#x27;</span> + k)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;obj.a = a&quot;  </span></span><br><span class="line"><span class="comment">// &quot;obj.b = b&quot;  </span></span><br><span class="line"><span class="comment">// &quot;obj.c = c&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="for-…-of"><a href="#for-…-of" class="headerlink" title="for … of"></a>for … of</h3><ul><li>在可迭代对象上创建一个迭代循环，调用自定义迭代钩子，为每个不同属性的值执行语句</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;a&quot;</span></span><br><span class="line"><span class="comment">// &quot;b&quot;</span></span><br><span class="line"><span class="comment">// &quot;c&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of#for...of%E4%B8%8Efor...in%E7%9A%84%E5%8C%BA%E5%88%AB"><code>for ... in</code> 与 <code>for ... of</code>的区别 ✨</a></strong></p></blockquote><hr><h3 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach()"></a>Array.prototype.forEach()</h3><ul><li>forEach 可以接收两个参数（回调函数, 回调函数中this的值），<strong>如果使用箭头函数，thisArg参数会被忽略</strong></li><li>callback可以接收三个参数 （当前元素，当前元素的索引，当前数组）</li><li>在forEach执行过程中，除抛出异常外，没有办法终止或跳出循环</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)  <span class="comment">// z, x, o, n, g</span></span><br><span class="line">  <span class="keyword">if</span> (value === <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">shift</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, arr)</span><br></pre></td></tr></table></figure><hr><h3 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h3><ul><li>map方法和forEach类似，接收一个回调函数作为参数，将数组所有成员一次传入函数，</li><li>然后把每次的执行结果组成一个新数组返回，<strong>如果不是为了使用返回值，就不要用map</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [122, 120, 121, 111, 110, 103]</span></span><br></pre></td></tr></table></figure><hr><h3 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h3><ul><li>filter方法用来过滤数组，返回满足条件成员组成的一个新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) &gt;= <span class="number">120</span></span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="comment">// const newArr = arr.filter(value =&gt; value.charCodeAt(0) &gt;= 120)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [&#x27;z&#x27;, &#x27;x&#x27;, &#x27;y&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h3 id="Array-prototype-some-amp-Array-prototype-every"><a href="#Array-prototype-some-amp-Array-prototype-every" class="headerlink" title="Array.prototype.some() &amp; Array.prototype.every()"></a>Array.prototype.some() &amp; Array.prototype.every()</h3><ul><li>some、every方法功能和用法都相似，返回一个布尔值，表示数组成员是否符合某种条件</li><li>some 当有一个数组成员符合条件就返回true；every 当全部数组成员符合条件才返回true，否则返回false</li><li><strong>对于空数组 some返回false，every返回true，回调函数都不会执行</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> someRes = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) &gt; <span class="number">120</span>  <span class="comment">// 只要有一个charcode大于120就返回true</span></span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="keyword">const</span> everyRes = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) &gt; <span class="number">120</span>  <span class="comment">// charcode大于120才返回true</span></span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(someRes, everyRes) <span class="comment">// true, false</span></span><br></pre></td></tr></table></figure><hr><h3 id="Array-prototype-reduce-amp-Array-prototype-reduceRight"><a href="#Array-prototype-reduce-amp-Array-prototype-reduceRight" class="headerlink" title="Array.prototype.reduce() &amp; Array.prototype.reduceRight()"></a>Array.prototype.reduce() &amp; Array.prototype.reduceRight()</h3><ul><li><p>reduce()，reduceRight() 依次处理数组中每个成员，最终累计为一个值；<br>reduce从左到右，reduceRight从右到左</p></li><li><p>接收两个参数  回调函数，第一个参数的默认值</p></li><li><p>回调函数接收四个参数 前两个参数是必须的，后两个参数是可选的 👇</p><p><code>previousValue</code>: 上一次执行返回的累积值，默认为数组的第一个成员</p><p><code>currentValue</code>: 当前变量，[如果没有指定参数1的默认值] 默认为数组的第二个成员</p><p><code>currentIndex</code>: 当前位置，默认0</p><p><code>array</code>: 原数组</p></li><li><p><strong>如果数组为空，没有指定第一个参数的默认值，将抛出异常，如果指定了第一个参数的默认值，callback不会执行，该参数会被直接返回</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> reduceRes = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">previousValue, currentValue, currentIndex, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> previousValue + currentValue</span><br><span class="line">&#125;, <span class="string">&#x27;i am &#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reduceRes) <span class="comment">// &quot;i am zxy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> max = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b ? a : b) <span class="comment">// 找出数组中最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max) <span class="comment">// z</span></span><br></pre></td></tr></table></figure><hr><h3 id="Object-keys-Object-values"><a href="#Object-keys-Object-values" class="headerlink" title="Object.keys, Object.values"></a>Object.keys, Object.values</h3><ul><li>Object.keys(obj)： 返回一个由该对象自身的所有属性名组成的数组</li><li>Object.values(obj)： 返回一个由该对象自身的所有属性值组成的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">10000001</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zxyong&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key,<span class="variable language_">this</span>[key])</span><br><span class="line">&#125;, obj)</span><br><span class="line"><span class="comment">// &quot;obj.id = 10000001&quot;</span></span><br><span class="line"><span class="comment">// &quot;obj.name = zxyong&quot;</span></span><br><span class="line"><span class="comment">// &quot;obj.age = 18&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><ul><li>返回一个给定对象自身可枚举属性的键值对数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">10000001</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zxyong&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(k + <span class="string">&#x27; =&gt; &#x27;</span> + v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;a =&gt; 1&quot;</span></span><br><span class="line"><span class="comment">// &quot;b =&gt; 2&quot;</span></span><br><span class="line"><span class="comment">// &quot;c =&gt; 3&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames"></a>Object.getOwnPropertyNames</h3><ul><li>与 Object.keys类似，返回一个包含自身所有属性名的数组，（包含不可枚举的属性名）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(arr) <span class="comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;length&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>参考链接<br><a href="https://wangdoc.com/javascript/">https://wangdoc.com/javascript/</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo+git page搭建自己的博客网站</title>
      <link href="/posts/acb03bb7/"/>
      <url>/posts/acb03bb7/</url>
      
        <content type="html"><![CDATA[<p>👉 最近偶然在网上看到一个非常漂亮的个人博客网站，突然觉得自己作为一个前端攻城狮(小菜鸡)🙈，也要有一个这样的网站；<font color="red">❤</font>动不如行动，问了度娘后找到了最简便的方法，<font color="#70a1ff">GitHub+Hexo搭建静态博客网站</font>，下面介绍搭建过程，只需简单的几步。</p><h2 id="Hexo-👍"><a href="#Hexo-👍" class="headerlink" title="Hexo 👍"></a>Hexo 👍</h2><p>生成静态博客网页的一个脚手架，<a href="https://hexo.io/zh-cn/">hexo官网</a> 的api教程，插件，主题什么的都非常丰富，有耐心的同学可以去自己摸索一下，我这里只写一下怎么搞一个能跑起来的博客网站。</p><h2 id="安装hexo-🧰"><a href="#安装hexo-🧰" class="headerlink" title="安装hexo 🧰"></a>安装hexo 🧰</h2><p>安装前您的电脑上必须已经安装了 <a href="https://nodejs.org/zh-cn/">Node.js</a> 和 <a href="https://git-scm.com/downloads">Git</a>，如果已经安装这两个工具（不会安装的请自行百度吧），那么您就可以使用npm安装Hexo了，在任意目录打开终端，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="建站-⚔️"><a href="#建站-⚔️" class="headerlink" title="建站 ⚔️"></a>建站 ⚔️</h2><h3 id="初始化Hexo目录"><a href="#初始化Hexo目录" class="headerlink" title="初始化Hexo目录"></a>初始化Hexo目录</h3><p>依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;<span class="comment"># 初始化hexo目录  folder-目录名</span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;<span class="comment"># 进入hexo目录</span></span><br><span class="line">$ npm install<span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>如果以上步骤都正确，那么您现在的hexo目录结构应该是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><ul><li><p>_config.yml：网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p></li><li><p>package.json：应用的依赖信息。</p></li><li><p>scaffolds：<a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p></li><li><p>source：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p></li><li><p>themes：<a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p></li></ul><h2 id="运行-amp-部署-🚀"><a href="#运行-amp-部署-🚀" class="headerlink" title="运行&amp;部署 🚀"></a>运行&amp;部署 🚀</h2><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>在终端执行<code>hexo server</code>，执行成功后，在浏览器输入<code>localhost:4000</code>，然后回车，如果成功打开页面，那么恭喜🎉，第一步已经成功!</p><blockquote><p>如果执行遇到了报错，可能是因为hexo默认使用的4000端口被占用了，可以使用<code>hexo server -p 4000</code>指定端口运行。</p></blockquote><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>现在网站只是能在本地打开，如果想要随时随地的到处炫耀😎，那么我们要将它部署到GitHub上，这样就可以在任何地方打开了。</p><ol><li><p>新建git仓库</p><p>在自己的 <a href="https://github.com/">GitHub</a>上新建一个仓库*(没有的请自行去注册/登录)*，</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zxyong/blog-image/raw/master/img/20210426170628.png" alt="GitHub新建仓库" title="GitHub新建仓库"></p></li><li><p>配置hexo部署到GitHub</p><p>用您的编辑器打开hexo根目录的<code>_config.yml</code>文件，找到最下面的<code>deploy</code>配置，添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:zxyo/zxyong.git</span> <span class="comment"># 改为您自己刚才建的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p>上面github: 的仓库地址一定要改为您自己的仓库ssh克隆的地址。<br>使用ssh地址而不用https是为了避免每次部署的时候都需要登录github账户。[<a href="">配置ssh</a>]</p></blockquote></li><li><p>部署到gitee</p><p>由于国内对访问GitHub的限制，我们也可以同时部署到gitee，配置方法与配置github相同，然后添加一行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:zxyo/zxyong.git</span> <span class="comment"># 改为您自己的仓库地址</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">git@gitee.com:zxyo/zxyong.git</span> <span class="comment"># 改为您自己的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>确保一切无误后，就可以使用命令部署了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean <span class="comment"># 清除缓存文件</span></span><br><span class="line">$ hexo gnerate <span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo deploy <span class="comment"># 部署到_config.yml中配置的git仓库中</span></span><br></pre></td></tr></table></figure><blockquote><p>在GitHub或Gitee的仓库设置里开启git page，就可以访问到您的博客了✌！<br>Gitee每次部署后都需要去手动更新git page。</p></blockquote></li></ol><h2 id="更换主题-🎨"><a href="#更换主题-🎨" class="headerlink" title="更换主题 🎨"></a>更换主题 🎨</h2><ol><li><p>hexo官网的 <a href="https://hexo.io/themes/">主题</a> 有很多，可以自己去找一个喜欢的，我用的是 <a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly</a> 这个主题。</p></li><li><p>找到这个主题的 <a href="https://github.com/jerryc127/hexo-theme-butterfly">GitHub仓库</a> 或 <a href="https://gitee.com/iamjerryw/hexo-theme-butterfly">Gitee仓库</a> clone下来放到你的hexo项目的themes目录下。</p></li><li><p>修改<code>_config.yml</code>文件，把主题改为butterfly：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li><li><p>安装插件，如果你没有pug和stylus渲染器，执行命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>执行<code>hexo clean &amp; hexo d -g</code>重新打开网页就能看见更换后的样子啦！</p></li><li><p>主题配置</p><p>在<code>/themes/butterfly</code>目录下还有一个<code>_config.yml</code>配置文件，这个是你主题的配置文件，里面配置项很多可以查看 <a href="https://butterfly.js.org/posts/4aa8abbe/">官方文档</a> 进行自由配置。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
